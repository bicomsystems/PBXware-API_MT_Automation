{
	"info": {
		"_postman_id": "a1f4cd2c-be75-4b3d-87e8-93dd7b8a041b",
		"name": "PBXware_MT_Setup",
		"description": "**PRECONDITIONs:**\n\n1. Change value of Variable IP to IP of your system\n2. Change value of variable API_Key to your API\n3. You must have one Service Plan created manualy on your system.\n    \n\nCall screening edit and configuration ES on extension is removed because have bad response.\n\nPhone Callback Edit and Configuration ES on extension is removed because it have problem.\n\nBLFs Edit and Configuration ES on extension removed because we cant enable AP over the API, but only manual.\n\nExtension Operation Times ES Configuration request was removed, because we don't have edit method to set first OT on extension, and then to call configuration method. When we call configuration method before manually saving it in GUI, it will return an undefined error.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26165058",
		"_collection_link": "https://sinisatest.postman.co/workspace/Bicom-PBXware-Collection~b48e31b0-8ae5-4960-9164-185215041965/collection/26165058-a1f4cd2c-be75-4b3d-87e8-93dd7b8a041b?action=share&source=collection_link&creator=26165058"
	},
	"item": [
		{
			"name": "Tenant Package & Tenant",
			"item": [
				{
					"name": "107:Adding Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Set a collection variable with the value from the \"id\" field",
									"        pm.collectionVariables.set(\"TenantPackageID\", responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TenantPackageID\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.add&name=API_Package&restrict_splans=0&allowed_service_plans=1&call_recordings=1&monitoring=1&call_screening=1&extensions=100&voicemails=100&queues=100&cfs=100&rgroups=100&hot_desking=100&ivrs=100",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.add"
								},
								{
									"key": "name",
									"value": "API_Package",
									"description": "Tenant Package Name (Required)"
								},
								{
									"key": "restrict_splans",
									"value": "0",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)"
								},
								{
									"key": "allowed_service_plans",
									"value": "1",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)"
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "1",
									"description": "Country ID (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "monitoring",
									"value": "1",
									"description": "Area Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "call_screening",
									"value": "1",
									"description": "National Code (Required). (Regex: /^(1|0)$/)"
								},
								{
									"key": "extensions",
									"value": "100",
									"description": "Extensions (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemails",
									"value": "100",
									"description": "Voicemails (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "queues",
									"value": "100",
									"description": "Queues (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "cfs",
									"value": "100",
									"description": "Conferences (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "rgroups",
									"value": "100",
									"description": "Ring Groups (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "hot_desking",
									"value": "100",
									"description": "Hot Desking (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "ivrs",
									"value": "100",
									"description": "IVRs (Required). (Regex: /^\\\\d{1,4}$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "108:Editing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.edit&server=1&id={{TenantPackageID}}&restrict_splans=0&allowed_service_plans=1&extensions=200&voicemails=200",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.edit",
									"description": "Arguments are identical to the ones in Adding Tenant Packages section. All of them are optional, except:"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1. (Required)"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID."
								},
								{
									"key": "name",
									"value": "",
									"description": "Tenant Package Name",
									"disabled": true
								},
								{
									"key": "restrict_splans",
									"value": "0",
									"description": "Restrict Service Plans (This field is required if billing is turned on in license). (Regex: /^(1|0)$/)"
								},
								{
									"key": "allowed_service_plans",
									"value": "1",
									"description": "Allowed Service Plans (Required if restrict service plan is set to yes ( 1 )). (Regex: /^\\\\d{1,9}+(,\\\\d{1,9}+)*$/)"
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Default Service Plan. (Regex: /^\\\\d{1,9}$/)",
									"disabled": true
								},
								{
									"key": "call_recordings",
									"value": "",
									"description": "Country ID. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "monitoring",
									"value": "",
									"description": "Area Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "call_screening",
									"value": "",
									"description": "National Code. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "200",
									"description": "Extensions. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemails",
									"value": "200",
									"description": "Voicemails. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "cfs",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "rgroups",
									"value": "",
									"description": "Ring Groups. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "hot_desking",
									"value": "",
									"description": "Hot Desking. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "ivrs",
									"value": "",
									"description": "IVRs. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "109:Tenant Package Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageConfig = responseBody[id];",
									"",
									"            // Validate specific properties for each package configuration",
									"            pm.expect(packageConfig).to.have.property('name').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('service_plan').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('allowed_service_plans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ext').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('voicemail').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('queues').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('ivr').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('cf').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('rgroups').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('hot_desking').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('restrict_splans').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_recordings').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('monitoring').that.is.a('string');",
									"            pm.expect(packageConfig).to.have.property('call_screening').that.is.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.configuration&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.configuration",
									"description": "Response will consist of an array of tenant package configuration."
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "110:Listing Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys (IDs) in the response",
									"        for (var id in responseBody) {",
									"            var packageName = responseBody[id];",
									"",
									"            // Validate specific properties for each package",
									"            pm.expect(packageName).to.be.a('string');",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant Package ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "111:Adding Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"",
									"        pm.collectionVariables.set(\"TenantID\", responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TenantID\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.add&tenant_name={{$randomCompanyName}}&tenant_code=900&package={{TenantPackageID}}&ext_length=3&country=135&national=0&international=00&callgroups=1,2,3,4,5&max_contacts=3",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.add"
								},
								{
									"key": "tenant_name",
									"value": "{{$randomCompanyName}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)"
								},
								{
									"key": "tenant_code",
									"value": "900",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "ext_length",
									"value": "3",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)"
								},
								{
									"key": "country",
									"value": "135",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)",
									"disabled": true
								},
								{
									"key": "national",
									"value": "0",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "00",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "glocomproxy",
									"value": "",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "apusername",
									"value": "",
									"description": "HTTP username. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "appassword",
									"value": "",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)",
									"disabled": true
								},
								{
									"key": "defaultserver",
									"value": "",
									"description": "Default Server. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "announcetrunks",
									"value": "",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "absolutetimeout",
									"value": "",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "cdrvoicemail",
									"value": "",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "faxformat",
									"value": "",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto",
									"disabled": true
								},
								{
									"key": "faxfiletype",
									"value": "",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF",
									"disabled": true
								},
								{
									"key": "default_location",
									"value": "",
									"description": "Default Extension Location (Local=1, Remote=2)",
									"disabled": true
								},
								{
									"key": "enabletcalls",
									"value": "",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "disabletcid",
									"value": "",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "tenantcid",
									"value": "",
									"description": "Default CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_faxcid",
									"value": "",
									"description": "Default Fax CallerID. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "usedefaultcid",
									"value": "",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "usedidcid",
									"value": "",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "finde164",
									"value": "",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordlimit",
									"value": "",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "showdirosc",
									"value": "",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordglobal",
									"value": "",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "mp3_auto_conv",
									"value": "",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)",
									"disabled": true
								},
								{
									"key": "recordbeep",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "recordformat",
									"value": "",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native → GSM\n-ogg: OGG",
									"disabled": true
								},
								{
									"key": "audiolang",
									"value": "",
									"description": "Audio Language. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "cpark_timeout",
									"value": "",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "limitemail",
									"value": "",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "notifyemail",
									"value": "",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "leavenational",
									"value": "",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "currency",
									"value": "",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)",
									"disabled": true
								},
								{
									"key": "currencypos",
									"value": "",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "pstn_mode",
									"value": "",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "callgroups",
									"value": "1,2,3,4,5",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)"
								},
								{
									"key": "localcodecs",
									"value": "",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "remotecodecs",
									"value": "",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "networkcodecs",
									"value": "",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\"",
									"disabled": true
								},
								{
									"key": "hdcheck",
									"value": "",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlockext",
									"value": "",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdlockdevice",
									"value": "",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "hdautologout",
									"value": "",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hdlogoutinactive",
									"value": "",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "ringtonelocal",
									"value": "",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "hidecallerid",
									"value": "",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "allowescallerid",
									"value": "",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "enablecnamlookup",
									"value": "",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "setcidforgrouphunt",
									"value": "",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "didsaveupdatecid",
									"value": "",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "forceunknown",
									"value": "",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "hideextnodir",
									"value": "",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "custompresencetime",
									"value": "",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "usedynfeatures",
									"value": "",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allowextipauth",
									"value": "",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/).",
									"disabled": true
								},
								{
									"key": "voiceskippin",
									"value": "",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "email_from",
									"value": "",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vm_email_from",
									"value": "",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "local_channels",
									"value": "",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "remote_channels",
									"value": "",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "conferences",
									"value": "",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "queues",
									"value": "",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "auto_attendants",
									"value": "",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dahdi",
									"value": "",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "dids_notify_order",
									"value": "",
									"description": "Order By. (Regex: /^(did|date)$/)",
									"disabled": true
								},
								{
									"key": "es_ambulance",
									"value": "",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_fire",
									"value": "",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_police",
									"value": "",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)",
									"disabled": true
								},
								{
									"key": "es_notification_email",
									"value": "",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)",
									"disabled": true
								},
								{
									"key": "ldap_enabled",
									"value": "",
									"description": "Enable LDAP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "ldap_local_exts",
									"value": "",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_hotdesking",
									"value": "",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')",
									"disabled": true
								},
								{
									"key": "ldap_password",
									"value": "",
									"description": "LDAP password. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "appasword",
									"value": "",
									"description": "(Regex: /^\\\\S.+\\\\S$/)",
									"disabled": true
								},
								{
									"key": "sso_enforced_tenant",
									"value": "",
									"description": "Enable SSO on tenant. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "3",
									"description": "Maximum Connected Devices. (Regex: /^\\\\d{1,2}$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "543:Editing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.edit&server=1&id={{TenantID}}&status=1&tenant_code=999&country=825&area_code=555&national=1&international=11&glocom_dns_srv_lookup=1&glocomproxy=192.168.192.168&apusername=admin&appassword=Test1234!&defaultserver=1&announcetrunks=1&absolutetimeout=20000&cdrvoicemail=2&faxformat=auto&faxfiletype=2&default_location=2&enabletcalls=0&disabletcid=0&tenantcid=Default Caller ID&tenant_faxcid=Default Fax ID&usedefaultcid=1&usedidcid=1&finde164=0&recordlimit=555&showdirosc=1&recordglobal=1&recordsilent=0&mp3_auto_conv=keep&recordbeep=30&recordformat=gsm&audiolang=English&cpark_timeout=20&limitsound=1&limitemail=1&notifyemail=notify@email.com&leavenational=0&currency=E&currencypos=right&dialed_num_minimum_length=5&pstn_mode=0&callgroups=1,2,3&localcodecs=ulaw&remotecodecs=alaw&networkcodecs=g722&hdcheck=1&hdlockext=5&hdlockdevice=5&hdautologout=1&hdlogoutinactive=1&ringtonelocal=ringtone&hidecallerid=0&allowescallerid=1&enablecnamlookup=0&setcidforgrouphunt=0&cidmatchdid=1&dropanonymous=1&didsaveupdatecid=0&forceunknown=1&hideextnodir=0&custompresencetime=60&usedynfeatures=1&cf_call_rating_disable=1&jbimpl=adaptive&jbmaxsize=3000&jbresyncthreshold=99999&jbtargetextra=8888&allowextipauth=0&voiceskippin=0&email_from=email@from.com&vm_email_from=voicemail@from.com&local_channels=10&remote_channels=10&conferences=10&queues=10&auto_attendants=10&dahdi=10&dids_notify_email=didis_notify@email.com&dids_notify_order=did&es_ambulance=911&es_fire=911&es_police=911&es_notification_email=es_notifiication@email.com&ldap_enabled=1&ldap_local_exts=1&ldap_hotdesking=0&ldap_password=Test1234!&appasword=Password123!&emerg_location_header=Emergency-Header&sso_enforced_tenant=1&max_contacts=10",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.edit"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{TenantID}}",
									"description": "Tenant ID. For editing more tenants use CSV filr Add&Edit-Tenants.csv"
								},
								{
									"key": "status",
									"value": "1",
									"description": "Status (Not Active=0, Active=1, Suspended=2)"
								},
								{
									"key": "tenant_name",
									"value": "{{$randomCompanyName}}",
									"description": "Tenant Name (Required). Should be a valid FQDN (Fully Qualified Domain Name). (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "tenant_code",
									"value": "999",
									"description": "Unique 3-digit Tenant Code (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "package",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID (Required). Can be obtained with package object. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "ext_length",
									"value": "{{ExtLength}}",
									"description": "Extensions length (Required). Can be in range 2-16 ONLY. (Regex: /^([2-9]|(1[0-6]))$/)",
									"disabled": true
								},
								{
									"key": "country",
									"value": "825",
									"description": "Country ID (Required).Can be obtained with route object. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "area_code",
									"value": "555",
									"description": "Area Code. (Regex: /^\\\\d{1,50}$/)"
								},
								{
									"key": "national",
									"value": "1",
									"description": "National Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "11",
									"description": "International Code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "glocom_dns_srv_lookup",
									"value": "1",
									"description": "gloCOM Use DNS SRV Lookup. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "glocomproxy",
									"value": "192.168.192.168",
									"description": "gloCOM SIP Proxy. (Regex: /^.+$/)"
								},
								{
									"key": "apusername",
									"value": "admin",
									"description": "HTTP username. (Regex: /^.+$/)"
								},
								{
									"key": "appassword",
									"value": "Test1234!",
									"description": "HTTP password. (Regex: /^\\\\S.+\\\\S$/)"
								},
								{
									"key": "defaultserver",
									"value": "1",
									"description": "Default Server. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "announcetrunks",
									"value": "1",
									"description": "Announce Trunks. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "absolutetimeout",
									"value": "20000",
									"description": "Absolute Timeout in sec. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "cdrvoicemail",
									"value": "2",
									"description": "Voicemail in CDRs\n2: As Voicemail\n1: As Not Answered calls\n0: As Answered calls\n(Regex: /^(1|0|2)$/)"
								},
								{
									"key": "faxformat",
									"value": "auto",
									"description": "FAX page format\n-letter\n-legal\n-A4\n-auto"
								},
								{
									"key": "faxfiletype",
									"value": "2",
									"description": "FAX file type\n1: Both PDF and TIFF\n2: Only PDF\n3: Only TIFF"
								},
								{
									"key": "default_location",
									"value": "2",
									"description": "Default Extension Location (Local=1, Remote=2)"
								},
								{
									"key": "enabletcalls",
									"value": "0",
									"description": "Enable Tenant to Tenant calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "disabletcid",
									"value": "0",
									"description": "Disable CallerID rewrite for tenant to tenant calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "tenantcid",
									"value": "Default Caller ID",
									"description": "Default CallerID. (Regex: /^.+$/)"
								},
								{
									"key": "tenant_faxcid",
									"value": "Default Fax ID",
									"description": "Default Fax CallerID. (Regex: /^.+$/)"
								},
								{
									"key": "usedefaultcid",
									"value": "1",
									"description": "Use Default CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "usedidcid",
									"value": "1",
									"description": "Use DIDs as CallerID for tenant to tenant calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "finde164",
									"value": "0",
									"description": "Find E.164 numbers in DIDs. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "recordlimit",
									"value": "555",
									"description": "Number of objects per page (Default: 10). (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "showdirosc",
									"value": "1",
									"description": "Show Directory in OSC. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "recordglobal",
									"value": "1",
									"description": "Record calls by default. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "recordsilent",
									"value": "0",
									"description": "Silent recording by default. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "mp3_auto_conv",
									"value": "keep",
									"description": "Convert recordings to mp3 on generation. (Regex: /^(yes|keep|no)$/)"
								},
								{
									"key": "recordbeep",
									"value": "30",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "recordformat",
									"value": "gsm",
									"description": "Recordings format\n-gsm: GSM\n-wav: WAV\n-wav49: WAV49\n-g729: G729 native → GSM\n-ogg: OGG"
								},
								{
									"key": "audiolang",
									"value": "English",
									"description": "Audio Language. (Regex: /^.+$/)"
								},
								{
									"key": "cpark_timeout",
									"value": "20",
									"description": "Enhanced Call Parking Timeout (sec). (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "cpark_dial",
									"value": "",
									"description": "Enhanced Call Parking Announce Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "cpark_goto",
									"value": "",
									"description": "Enhanced Call Parking Timeout Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "limitsound",
									"value": "1",
									"description": "Play Sound. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "limitemail",
									"value": "1",
									"description": "Enable send email option. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "notifyemail",
									"value": "notify@email.com",
									"description": "Notification email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "leavenational",
									"value": "0",
									"description": "Leave National Code. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "currency",
									"value": "E",
									"description": "Currency symbol/ISO code. (Regex: /^.{1,3}$/)"
								},
								{
									"key": "currencypos",
									"value": "right",
									"description": "Currency writing convention\nleft: Symbol before amount\nright: Symbol after amount.\n(Regex: /^(left|right)$/)"
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "5",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "pstn_mode",
									"value": "0",
									"description": "PSTN numbering mode. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "callgroups",
									"value": "1,2,3",
									"description": "Call groups/Pickup Groups (comma separated). (Regex: /^[0-9]+(,[0-9]+)*$/)"
								},
								{
									"key": "localcodecs",
									"value": "ulaw",
									"description": "Local Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)"
								},
								{
									"key": "remotecodecs",
									"value": "alaw",
									"description": "Remote Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\""
								},
								{
									"key": "networkcodecs",
									"value": "g722",
									"description": "Network Codecs. (Regex: /^(:|ulaw|alaw|g722|opus|g723.1|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/).\""
								},
								{
									"key": "hdcheck",
									"value": "1",
									"description": "Login Attempts Check. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "hdlockext",
									"value": "5",
									"description": "Lock Extension After X Failed Attempts.  (Regex: /^\\\\d{1}$/)"
								},
								{
									"key": "hdlockdevice",
									"value": "5",
									"description": "Lock Phone After X Locked Extensions.  (Regex: /^\\\\d{1}$/)"
								},
								{
									"key": "hdautologout",
									"value": "1",
									"description": "Automatic Log Out. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "hdlogoutinactive",
									"value": "1",
									"description": "Log Out After X Hours of Inactivity. (Regex: /^\\\\d{1}$/)"
								},
								{
									"key": "ringtonelocal",
									"value": "ringtone",
									"description": "Ringtone for Local calls. (Regex: /^.+$/)"
								},
								{
									"key": "hidecallerid",
									"value": "0",
									"description": "Hide CallerID in OSC. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "allowescallerid",
									"value": "1",
									"description": "Allow ES CallerID\" for Call Forwarding. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "enablecnamlookup",
									"value": "0",
									"description": "Enable CallerID CNAM lookup. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "setcidforgrouphunt",
									"value": "0",
									"description": "Set CallerID for Group Hunt calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "cidmatchdid",
									"value": "1",
									"description": "Only Allow Trunk CallerID within DID range. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "dropanonymous",
									"value": "1",
									"description": "Drop Anonymous calls. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "didsaveupdatecid",
									"value": "0",
									"description": "On DID save update ES/CID/Trunks. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "forceunknown",
									"value": "1",
									"description": "Do not allow users sending any CallerID. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "hideextnodir",
									"value": "0",
									"description": "Hide Extensions with no department (gloCOM). (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "custompresencetime",
									"value": "60",
									"description": "gloCOM presence offline delay (min). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "usedynfeatures",
									"value": "1",
									"description": "Use Dynamic Features. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "nobillingfwd",
									"value": "",
									"description": "Disable Billing for Call Forwarding. (deprecated and will be soon replaced with cf_call_rating_disable). (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "1",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)"
								},
								{
									"key": "jbimpl",
									"value": "adaptive",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)"
								},
								{
									"key": "jbmaxsize",
									"value": "3000",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "jbresyncthreshold",
									"value": "99999",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "jbtargetextra",
									"value": "8888",
									"description": "Target extra. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "allowextipauth",
									"value": "0",
									"description": "Allow IP Address Authentication for Extensions (Yes=1, No=0). (Regex: /^(1|0|2)$/)."
								},
								{
									"key": "voiceskippin",
									"value": "0",
									"description": "Skip Voicemail PIN Prompt (Yes=1, No=0)"
								},
								{
									"key": "email_from",
									"value": "email@from.com",
									"description": "From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "vm_email_from",
									"value": "voicemail@from.com",
									"description": "Voicemail From E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "local_channels",
									"value": "10",
									"description": "Local Channels. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "remote_channels",
									"value": "10",
									"description": "Remote Channels. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "conferences",
									"value": "10",
									"description": "Conferences. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "queues",
									"value": "10",
									"description": "Queues. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "auto_attendants",
									"value": "10",
									"description": "Auto Attendants. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "dahdi",
									"value": "10",
									"description": "DAHDI. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "dids_notify_email",
									"value": "didis_notify@email.com",
									"description": "Notification E-mail. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "dids_notify_order",
									"value": "did",
									"description": "Order By. (Regex: /^(did|date)$/)"
								},
								{
									"key": "es_ambulance",
									"value": "911",
									"description": "Ambulance. (Regex: /^\\\\d{3,16}$/)"
								},
								{
									"key": "es_fire",
									"value": "911",
									"description": "Fire. (Regex: /^\\\\d{3,16}$/)"
								},
								{
									"key": "es_police",
									"value": "911",
									"description": "Police. (Regex: /^\\\\d{3,16}$/)"
								},
								{
									"key": "es_notification_email",
									"value": "es_notifiication@email.com",
									"description": "Notification E-mail. (Regex: /^([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,30};?)+$/)"
								},
								{
									"key": "ldap_enabled",
									"value": "1",
									"description": "Enable LDAP (Yes=1, No=0)"
								},
								{
									"key": "ldap_local_exts",
									"value": "1",
									"description": "Include System Extensions:(Yes=1, No=0, Not set='')"
								},
								{
									"key": "ldap_hotdesking",
									"value": "0",
									"description": "Enable LDAP For Hot Desking Devices:(Yes=1, No=0, Not set='')"
								},
								{
									"key": "ldap_password",
									"value": "Test1234!",
									"description": "LDAP password. (Regex: /^.+$/)"
								},
								{
									"key": "appasword",
									"value": "Password123!",
									"description": "(Regex: /^\\\\S.+\\\\S$/)"
								},
								{
									"key": "emerg_location_header",
									"value": "Emergency-Header",
									"description": "Emergency Location Header. (Regex: /^[\\\\w\\\\-,]{1,100}$/)"
								},
								{
									"key": "sso_enforced_tenant",
									"value": "1",
									"description": "Enable SSO on tenant. (Regex: /^(1|0)$/)"
								},
								{
									"key": "max_contacts",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "112:Listing Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There is no Tenant created on this system!\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There is no Tenant created on this system!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            // Iterate through each object in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var tenant = responseBody[key];",
									"",
									"                    pm.test('Tenant ' + tenant.name + ' Validation', function () {",
									"                        pm.expect(tenant).to.be.an('object');",
									"                        pm.expect(tenant).to.have.property('name').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('tenantcode').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('package_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('package').that.is.a('string');",
									"                        pm.expect(tenant).to.have.property('ext_length').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_id').that.is.a('number');",
									"                        pm.expect(tenant).to.have.property('country_code').that.is.a('number');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.list",
									"description": "Response will consist of an array of tenants with array key being the Tenant ID."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "113:Tenant Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Validate specific properties",
									"        pm.expect(responseBody).to.have.property('server_name').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('tenantcode').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('package_id').that.is.a('string');",
									"",
									"        // Validate each field with the expected exact values",
									"        //pm.expect(responseBody.server_name).to.eql(\"Tenant_450\");",
									"        pm.expect(responseBody.tenantcode).to.eql(\"900\");",
									"        //pm.expect(responseBody.package_id).to.eql(\"1\");",
									"        pm.expect(responseBody.glocom_dns_srv_lookup).to.eql(\"yes\");",
									"        pm.expect(responseBody.glocomproxy).to.eql(\"192.168.192.168\");",
									"        pm.expect(responseBody.absolutetimeout).to.eql(\"20000\");",
									"        pm.expect(responseBody.cdrvoicemail).to.eql(\"2\");",
									"        pm.expect(responseBody.faxformat).to.eql(\"auto\");",
									"        pm.expect(responseBody.faxfiletype).to.eql(\"2\");",
									"        pm.expect(responseBody.status).to.eql(\"active\");",
									"        pm.expect(responseBody.default_location).to.eql(\"2\");",
									"        pm.expect(responseBody.recordbeep).to.eql(\"30\");",
									"        pm.expect(responseBody.recordformat).to.eql(\"gsm\");",
									"        pm.expect(responseBody.ringtonelocal).to.eql(\"ringtone\");",
									"        pm.expect(responseBody.didsaveupdatecid).to.be.null;",
									"        pm.expect(responseBody.enabletcalls).to.eql(\"no\");",
									"        pm.expect(responseBody.tenantcid).to.eql(\"Default Caller ID\");",
									"        pm.expect(responseBody.tenant_faxcid).to.eql(\"Default Fax ID\");",
									"        pm.expect(responseBody.recordlimit).to.eql(\"555\");",
									"        pm.expect(responseBody.country).to.eql(\"825\");",
									"        pm.expect(responseBody.area_code).to.eql(\"555\");",
									"        pm.expect(responseBody.national).to.eql(\"1\");",
									"        pm.expect(responseBody.international).to.eql(\"11\");",
									"        pm.expect(responseBody.es_ambulance).to.eql(\"911\");",
									"        pm.expect(responseBody.es_fire).to.eql(\"911\");",
									"        pm.expect(responseBody.es_police).to.eql(\"911\");",
									"        pm.expect(responseBody.es_notification_email).to.eql(\"es_notifiication@email.com\");",
									"        pm.expect(responseBody.emergency_callerid_tenant).to.be.null;",
									"        pm.expect(responseBody.audiolang).to.eql(\"English\");",
									"        pm.expect(responseBody.apusername).to.eql(\"admin\");",
									"        pm.expect(responseBody.appassword).to.eql(\"Test1234!\");",
									"        pm.expect(responseBody.incominglimit).to.eql(\"10\");",
									"        pm.expect(responseBody.outgoinglimit).to.eql(\"10\");",
									"        pm.expect(responseBody.conch).to.eql(\"10\");",
									"        pm.expect(responseBody.quech).to.eql(\"10\");",
									"        pm.expect(responseBody.ergch).to.eql(\"8\");",
									"        pm.expect(responseBody.aach).to.eql(\"10\");",
									"        pm.expect(responseBody.zapch).to.eql(\"10\");",
									"        pm.expect(responseBody.notifyemail).to.eql(\"notify@email.com\");",
									"        pm.expect(responseBody.cpark_timeout).to.eql(\"20\");",
									"        pm.expect(responseBody.cpark_dial).to.be.null;",
									"        pm.expect(responseBody.cpark_goto).to.be.null;",
									"        pm.expect(responseBody.hdlockext).to.eql(\"5\");",
									"        pm.expect(responseBody.hdlockdevice).to.eql(\"5\");",
									"        pm.expect(responseBody.hdlogoutinactive).to.eql(\"1\");",
									"        pm.expect(responseBody.custompresencetime).to.eql(\"60\");",
									"        pm.expect(responseBody.dialed_num_minimum_length).to.eql(\"5\");",
									"        pm.expect(responseBody.emerg_location_header).to.eql(\"Emergency-Header\");",
									"        pm.expect(responseBody.max_contacts).to.eql(\"10\");",
									"        pm.expect(responseBody.announcetrunks).to.eql(\"1\");",
									"        pm.expect(responseBody.recordglobal).to.eql(\"1\");",
									"        pm.expect(responseBody.recordsilent).to.eql(\"0\");",
									"        pm.expect(responseBody.hidecallerid).to.eql(\"0\");",
									"        pm.expect(responseBody.allowescallerid).to.eql(\"1\");",
									"        pm.expect(responseBody.enablecnamlookup).to.eql(\"0\");",
									"        pm.expect(responseBody.setcidforgrouphunt).to.eql(\"0\");",
									"        pm.expect(responseBody.cidmatchdid).to.eql(\"1\");",
									"        pm.expect(responseBody.dropanonymous).to.eql(\"1\");",
									"        pm.expect(responseBody.forceunknown).to.eql(\"1\");",
									"        pm.expect(responseBody.hideextnodir).to.eql(\"0\");",
									"        pm.expect(responseBody.usedynfeatures).to.eql(\"1\");",
									"        pm.expect(responseBody.nobillingfwd).to.eql(\"1\");",
									"        pm.expect(responseBody.cf_call_rating_disable).to.eql(\"1\");",
									"        pm.expect(responseBody.allowextipauth).to.eql(\"0\");",
									"        pm.expect(responseBody.voiceskippin).to.eql(\"0\");",
									"        pm.expect(responseBody.usedefaultcid).to.eql(\"1\");",
									"        pm.expect(responseBody.usedidcid).to.eql(\"1\");",
									"        pm.expect(responseBody.finde164).to.eql(\"0\");",
									"        pm.expect(responseBody.showdirosc).to.eql(\"1\");",
									"        pm.expect(responseBody.leavenational).to.eql(\"0\");",
									"        pm.expect(responseBody.limitsound).to.eql(\"1\");",
									"        pm.expect(responseBody.limitemail).to.eql(\"1\");",
									"        pm.expect(responseBody.pstn_mode).to.eql(\"0\");",
									"        pm.expect(responseBody.hdcheck).to.eql(\"1\");",
									"        pm.expect(responseBody.hdautologout).to.eql(\"0\");",
									"",
									"        // Validate codec arrays",
									"        pm.expect(responseBody.local_codecs).to.be.an('array').that.includes(\"ulaw\");",
									"        pm.expect(responseBody.remote_codecs).to.be.an('array').that.includes(\"alaw\");",
									"        pm.expect(responseBody.network_codecs).to.be.an('array').that.includes(\"g722\");",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.configuration&id={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.configuration",
									"description": "Response will consist of an array of tenant configuration."
								},
								{
									"key": "id",
									"value": "{{TenantID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trunks",
			"item": [
				{
					"name": "115:Adding Trunk 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        pm.collectionVariables.set('TrunkID1', responseBody.id);",
									"        ",
									"        // Retrieve the current TrunkIDs from the collection",
									"        var currentTrunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Push the new ID into the array",
									"        currentTrunkIDs.push(responseBody.id);",
									"",
									"        // Set the updated array as the TrunkIDs collection variable",
									"        pm.collectionVariables.set('TrunkIDs', currentTrunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TrunkID1\",null);",
									"pm.collectionVariables.set(\"TrunkIDs\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name=Trunk_{{$randomWord}}&provider_id=20&type=friend&dtmfmode=rfc2833&status=active&country=135&national=0&international=00&emerg_trunk=no&host={{$randomIP}}&username=admin&insecure=port,invite&looserouting=yes&incominglimit=100&outgoinglimit=100&busylevel=0&codecs=ulaw,alaw&codecs_ptime=50,60",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "Trunk_{{$randomWord}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "20",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "friend",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "rfc2833",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "active",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "135",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "0",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "00",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "no",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{$randomIP}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "admin",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "port,invite",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "yes",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "100",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "100",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "0",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "ulaw,alaw",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "50,60",
									"description": "Ptime (10, 20, 30 …​ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "116:Adding Trunk 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ID:', responseBody.id);",
									"",
									"        pm.collectionVariables.set('TrunkID2', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TrunkID2\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name=Trunk_{{$randomWord}}&provider_id=20&type=friend&dtmfmode=rfc2833&status=active&country=135&national=0&international=00&emerg_trunk=no&host={{$randomIP}}&username=admin&insecure=port,invite&looserouting=yes&incominglimit=100&outgoinglimit=100&busylevel=0&codecs=ulaw,alaw&codecs_ptime=50,60",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "Trunk_{{$randomWord}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "20",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "friend",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "rfc2833",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "active",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "135",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "0",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "00",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "no",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{$randomIP}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "admin",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "port,invite",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "yes",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "100",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "100",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "0",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "ulaw,alaw",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "50,60",
									"description": "Ptime (10, 20, 30 …​ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "117:Adding Trunk 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ID:', responseBody.id);",
									"",
									"        pm.collectionVariables.set('TrunkID3', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TrunkID3\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name=Trunk_{{$randomWord}}&provider_id=20&type=friend&dtmfmode=rfc2833&status=active&country=135&national=0&international=00&emerg_trunk=no&host={{$randomIP}}&username=admin&insecure=port,invite&looserouting=yes&incominglimit=100&outgoinglimit=100&busylevel=0&codecs=ulaw,alaw&codecs_ptime=50,60",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "Trunk_{{$randomWord}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "20",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "friend",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "rfc2833",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "active",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "135",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "0",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "00",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "no",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{$randomIP}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "admin",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "port,invite",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "yes",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "100",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "100",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "0",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "ulaw,alaw",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "50,60",
									"description": "Ptime (10, 20, 30 …​ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "118:Adding Trunk 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        console.log('Success:', responseBody.success);",
									"        console.log('ID:', responseBody.id);",
									"",
									"        pm.collectionVariables.set('TrunkID4', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"TrunkID4\",null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.add&server=1&name=Trunk_{{$randomWord}}&provider_id=20&type=friend&dtmfmode=rfc2833&status=active&country=135&national=0&international=00&emerg_trunk=no&host={{$randomIP}}&username=admin&insecure=port,invite&looserouting=yes&incominglimit=100&outgoinglimit=100&busylevel=0&codecs=ulaw,alaw&codecs_ptime=50,60",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.add"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "Trunk_{{$randomWord}}",
									"description": "Full Name (Required). (Regex: /^.+$/)."
								},
								{
									"key": "provider_id",
									"value": "20",
									"description": "Provider ID (SIP only) (Required). (Regex: /^[0-9]+$/)"
								},
								{
									"key": "type",
									"value": "friend",
									"description": "Trunk type (user, friend, peer) (Required)"
								},
								{
									"key": "dtmfmode",
									"value": "rfc2833",
									"description": "DTMF mode (auto, inband, rfc2833, info, shortinfo) (Required)"
								},
								{
									"key": "status",
									"value": "active",
									"description": "Status (active, not active, suspended) (Required)"
								},
								{
									"key": "country",
									"value": "135",
									"description": "Country code (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "national",
									"value": "0",
									"description": "National (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "international",
									"value": "00",
									"description": "International (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "emerg_trunk",
									"value": "no",
									"description": "Emergency trunk (Required). (Regex: /^(yes|no|1|0)$/)"
								},
								{
									"key": "host",
									"value": "{{$randomIP}}",
									"description": "Host (Required)"
								},
								{
									"key": "username",
									"value": "admin",
									"description": "Username (Required)"
								},
								{
									"key": "secret",
									"value": "",
									"description": "Secret (Required)",
									"disabled": true
								},
								{
									"key": "peer_host",
									"value": "",
									"description": "Peer host (Required)",
									"disabled": true
								},
								{
									"key": "peer_username",
									"value": "",
									"description": "Peer username (Required)",
									"disabled": true
								},
								{
									"key": "peer_secret",
									"value": "",
									"description": "Peer secret (Required)",
									"disabled": true
								},
								{
									"key": "insecure",
									"value": "port,invite",
									"description": "Insecure (port|invite|port,invite|very) (Required)"
								},
								{
									"key": "looserouting",
									"value": "yes",
									"description": "Loose routing (yes|no|1|0) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "100",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "100",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "busylevel",
									"value": "0",
									"description": "Busy level (Required). (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "codecs",
									"value": "ulaw,alaw",
									"description": "Allowed codecs separated with ',': ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p (Required)"
								},
								{
									"key": "codecs_ptime",
									"value": "50,60",
									"description": "Ptime (10, 20, 30 …​ 300) (Required)"
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify. (Regex: /^\\\\d{0,4}$/)",
									"disabled": true
								},
								{
									"key": "e164a",
									"value": "",
									"description": "E164 Accepted. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "passthru_mode",
									"value": "",
									"description": "Pass-thru mode. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "national_leave",
									"value": "",
									"description": "Leave national. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "area_code",
									"value": "",
									"description": "Area Code. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "prefix",
									"value": "",
									"description": "Prefix. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "testnum",
									"value": "",
									"description": "Test number. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authname. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "Auth. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "register",
									"value": "",
									"description": "Register. (Regex: /^([0-5])$/)",
									"disabled": true
								},
								{
									"key": "register_suffix",
									"value": "",
									"description": "Register Suffix. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "register_expiration",
									"value": "",
									"description": "Register expiration time in sec. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "fromuser",
									"value": "",
									"description": "From user. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "fromdomain",
									"value": "",
									"description": "From domain. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "phoneinuri",
									"value": "",
									"description": "User=phone in URI. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outboundproxy",
									"value": "",
									"description": "Outbound proxy. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "from_ipaddr",
									"value": "",
									"description": "Incoming IP addresses separated by comma (,). (Regex: /^[a-zA-Z0-9.,]+$/)",
									"disabled": true
								},
								{
									"key": "transport",
									"value": "",
									"description": "Transport (udp, tcp, tls). (Regex: /\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption. (Regex: /^(yes|offer)$/)",
									"disabled": true
								},
								{
									"key": "direct_media",
									"value": "",
									"description": "Direct media (no|yes|nonat|update|nonat,update)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Direct RTP setup (yes, no)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "Default IP. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust RPID. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send RPID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "sendpai",
									"value": "",
									"description": "Send PAI header. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "privacy",
									"value": "",
									"description": "Specify privacy (none, anonymous, anonymous_id, anonymous_number, anonymous_number_id)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Outbound Caller ID. (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "dialed_num_minimum_length",
									"value": "",
									"description": "Dialed number minimum length. (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "allow_es_callerid",
									"value": "",
									"description": "Allow enhanced services callerid.  (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "email_on_limit",
									"value": "",
									"description": "Email on limit. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "Outgoing dial options. (Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video support. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto framing. (Regex: /^(yes|no|1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "119:Listing Trunks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"TrunkIDs\");",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Get the existing TrunkIDs array from the collection variable",
									"        var trunkIDs = pm.collectionVariables.get('TrunkIDs') || [];",
									"",
									"        // Loop through trunk data",
									"        for (var trunkID in responseBody) {",
									"            var trunkData = responseBody[trunkID];",
									"            ",
									"            // Validate specific properties for each trunk",
									"            pm.test('Trunk ' + trunkID + ' Data Validation', function () {",
									"                pm.expect(trunkData).to.be.an('object');",
									"                pm.expect(trunkData).to.have.property('name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('protocol').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_id').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('provider_name').that.is.a('string');",
									"                pm.expect(trunkData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                ",
									"                // Push the trunk ID to the TrunkIDs array",
									"                trunkIDs.push(trunkID);",
									"                ",
									"                // Print the result for each trunk",
									"                console.log('Trunk ID:', trunkID);",
									"                console.log('Trunk Name:', trunkData.name);",
									"                console.log('Protocol:', trunkData.protocol);",
									"                console.log('Provider ID:', trunkData.provider_id);",
									"                console.log('Provider Name:', trunkData.provider_name);",
									"                console.log('Status:', trunkData.status);",
									"            });",
									"        }",
									"",
									"        // Update the TrunkIDs array in the collection variable",
									"        pm.collectionVariables.set('TrunkIDs', trunkIDs);",
									"        pm.environment.set(\"TrunkIDs\", trunkIDs);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.trunk.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.trunk.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter trunks by server (does not apply in Tenant Mode)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trunks & Tenants",
			"item": [
				{
					"name": "120:Setting Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.set&tenant={{TenantID}}&trunks={{TrunkIDs}}&primary_trunk={{TrunkID1}}&secondary_trunk={{TrunkID2}}&tertiary_trunk={{TrunkID3}}&primary_emerg_trunk={{TrunkID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.set",
									"description": "For setting more tenants with same trunks use Setting-Trunks&Tenants.csv file"
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID"
								},
								{
									"key": "trunks",
									"value": "{{TrunkIDs}}",
									"description": "List of trunk ID’s (comma separated). (Regex: /^[0-9,]+$/)"
								},
								{
									"key": "primary_trunk",
									"value": "{{TrunkID1}}",
									"description": "Primary trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_trunk",
									"value": "{{TrunkID2}}",
									"description": "Secondary trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "tertiary_trunk",
									"value": "{{TrunkID3}}",
									"description": "Tertiary trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "primary_emerg_trunk",
									"value": "{{TrunkID1}}",
									"description": "Primary emergency trunk. (Regex: /^\\\\d{1,10}$/)"
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "{{TrunkID2}}",
									"description": "Secondary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "{{TrunkID3}}",
									"description": "Tertiary emergency trunk. (Regex: /^\\\\d{1,10}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "121:Listing Trunks&Tenants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseData = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseData) {",
									"    console.error(\"Test Failed: \" + responseData.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseData.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseData).to.be.an('object');",
									"        pm.expect(responseData).to.have.property('primary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('trunks').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('primary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('secondary_emerg_trunk').that.is.a('string');",
									"        pm.expect(responseData).to.have.property('tertiary_emerg_trunk').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.trunks.list&tenant={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.trunks.list"
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service Plans",
			"item": [
				{
					"name": "122:Listing Service Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"        if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"            console.log(\"Test Passed: There is no service plan created on Server!\");",
									"            pm.test('There is no service plan created on the Server!', function () {",
									"            pm.expect(true).to.be.true; // Mark the test as passed",
									"    });",
									"}        else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Iterate through each Service Plan",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var servicePlan = responseBody[key];",
									"",
									"                    // Save the key (ERG ID) in the collection variable",
									"                    pm.collectionVariables.set(\"SP-ID\", key);",
									"",
									"                    pm.test('Service Plan ' + servicePlan.name + ' Validation', function () {",
									"                        pm.expect(servicePlan).to.be.an('object');",
									"                        pm.expect(servicePlan).to.have.property('name').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('tbd').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('min_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('connection_charge').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('inclusive').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('grace_period').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('billing').that.is.a('string');",
									"                        pm.expect(servicePlan).to.have.property('call_rating').that.is.a('string');",
									"                    });",
									"                }",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.list"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "266:Service Plans Rates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Define a flag to check if the element exists",
									"    var elementExists = false;",
									"",
									"    // Loop through the response and find the element with numeric keys",
									"    for (var key in responseBody) {",
									"        if (typeof responseBody[key] === 'object') {",
									"            for (var innerKey in responseBody[key]) {",
									"                if (!isNaN(innerKey)) {",
									"                    elementExists = true;",
									"                    validateFields(responseBody[key][innerKey], key);",
									"                    break;",
									"                }",
									"            }",
									"        }",
									"    }",
									"",
									"    // If the element doesn't exist, perform checks for all routes",
									"    if (!elementExists) {",
									"        for (var route in responseBody) {",
									"            if (typeof responseBody[route] === 'object') {",
									"                validateFields(responseBody[route], route);",
									"            }",
									"        }",
									"    }",
									"}",
									"",
									"// Function to perform field validations with notes",
									"function validateFields(element, route) {",
									"    // Function to validate whether a value is null or a string",
									"    function validateNullOrString(value) {",
									"        pm.expect(value === null || typeof value === 'string').to.be.true;",
									"    }",
									"",
									"    pm.test(`Inbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inbound);",
									"    });",
									"",
									"    pm.test(`Outbound Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.outbound);",
									"    });",
									"",
									"    pm.test(`Inclusives Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.inclusives);",
									"    });",
									"",
									"    pm.test(`Billing Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.billing);",
									"    });",
									"",
									"    pm.test(`Call Rating Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.call_rating);",
									"    });",
									"",
									"    pm.test(`Minimum Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.min_charge);",
									"    });",
									"",
									"    pm.test(`Connection Charge Rate Validation for rate ${route}`, function () {",
									"        validateNullOrString(element.connection_charge);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.splan.rates&id={{SP-ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.splan.rates",
									"description": "Use ServicePlansRates.csv file for multiple list of SPs."
								},
								{
									"key": "id",
									"value": "{{SP-ID}}",
									"description": "Service Plan ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "route",
									"value": "135",
									"description": "Route ID. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dgroup",
									"value": "2",
									"description": "Destination Group ID. Note: Only if route is supplied. (Regex: /^\\\\d+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UADs",
			"item": [
				{
					"name": "123:Listing UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        /*",
									"        // Iterate through each UAD in the response",
									"        for (var uadId in responseBody) {",
									"            if (responseBody.hasOwnProperty(uadId)) {",
									"                var uad = responseBody[uadId];",
									"",
									"                pm.test('UAD ' + uadId + ' Validation', function () {",
									"                    pm.expect(uad).to.be.an('object');",
									"                    pm.expect(uad).to.have.property('name').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('fullname').that.is.a('string');",
									"                    pm.expect(uad).to.have.property('enabled').that.is.a('boolean');",
									"                });",
									"            }",
									"        }",
									"        */",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant ID. (Regex: /^\\\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "124:Activating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.activate&server={{TenantID}}&id=135",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.activate"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "135",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "125:Activating UADs Yealink",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.activate&server={{TenantID}}&id=196",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.activate"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "196",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "126:Deactivating UADs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('UAD ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.uads.deactivate&server={{TenantID}}&id=135",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.uads.deactivate"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Regex: /^\\\\d+$/"
								},
								{
									"key": "id",
									"value": "135",
									"description": "UAD ID. (Regex: /^\\\\d+$/"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\n\nList UADs\n\n`activate`\n\nActivate UAD\n\n`deactivate`\n\nDeactivate UAD"
		},
		{
			"name": "Extensions",
			"item": [
				{
					"name": "127:Add Extension 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"ExtID1\", responseBody.id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{TenantID}}&name={{ExtName1}}&email={{ExtEmail1}}&ext=901&location=2&ua=196&secret=Test123!&pin=1111&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1&billing=0&call_rating=1&creditlimit=10&reminderbalance=50&service_plan={{SP-ID}}&acc_slave=0&limitenable=1&limittype=Monthly&softlimit=20&hardlimit=10&notification_email=test@test.com",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key"
								},
								{
									"key": "action",
									"value": "pbxware.ext.add",
									"description": "Action"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{ExtName1}}",
									"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "email",
									"value": "{{ExtEmail1}}",
									"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "ext",
									"value": "901",
									"description": "Extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "location",
									"value": "2",
									"description": "Location (Local=1, Remote=2) (Required)"
								},
								{
									"key": "ua",
									"value": "196",
									"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
								},
								{
									"key": "secret",
									"value": "Test123!",
									"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "pin",
									"value": "1111",
									"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
								},
								{
									"key": "prot",
									"value": "sip",
									"description": "Protocol ('sip' and 'iax' only!) (Required)"
								},
								{
									"key": "status",
									"value": "1",
									"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "2",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "2",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemail",
									"value": "1",
									"description": "Voicemail (Yes=1, No=0) (Required)"
								},
								{
									"key": "title",
									"value": "",
									"description": "Title. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "uad_sipheaders",
									"value": "",
									"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
									"disabled": true
								},
								{
									"key": "label",
									"value": "",
									"description": "Label. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_location",
									"value": "",
									"description": "User Location. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_language",
									"value": "",
									"description": "User lenguage. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authentification name. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
									"disabled": true
								},
								{
									"key": "billing",
									"value": "0",
									"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)"
								},
								{
									"key": "call_rating",
									"value": "1",
									"description": "Call Rating (Yes=1, No=0)"
								},
								{
									"key": "creditlimit",
									"value": "10",
									"description": "Credit limit (number, 12 digits max, required if Billing=1)"
								},
								{
									"key": "reminderbalance",
									"value": "50",
									"description": "Reminder balance (number, 5 digits max, required if Billing=1)"
								},
								{
									"key": "service_plan",
									"value": "{{SP-ID}}",
									"description": "Service Plan ID (required if Billing=1)"
								},
								{
									"key": "nat",
									"value": "",
									"description": "NAT (Yes=1, No=0, Never=2)",
									"disabled": true
								},
								{
									"key": "canreinvite",
									"value": "",
									"description": "SIP Re-INVITE support (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify (4 digits max)",
									"disabled": true
								},
								{
									"key": "ringtime",
									"value": "",
									"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
									"disabled": true
								},
								{
									"key": "incoming_dialoptions",
									"value": "",
									"description": "(Regex: /^[0tTr]+$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "(Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "autoprovisiong",
									"value": "",
									"description": "Auto provisioning (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "dhcp",
									"value": "",
									"description": "DHCP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "staticip",
									"value": "",
									"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "netmask",
									"value": "",
									"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "gateway",
									"value": "",
									"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns1",
									"value": "",
									"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns2",
									"value": "",
									"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "macaddress",
									"value": "",
									"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
									"disabled": true
								},
								{
									"key": "voicemail_timezone",
									"value": "",
									"description": "Voicemail timezone (Germany, USA…​). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "vm_greeting_message",
									"value": "",
									"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
									"disabled": true
								},
								{
									"key": "setcallerid",
									"value": "",
									"description": "Set CallerID (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acodecs",
									"value": "",
									"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycom’s Default\n5 - Sipura\n6 - Snom phones",
									"disabled": true
								},
								{
									"key": "page_custom",
									"value": "",
									"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "recordcalls",
									"value": "",
									"description": "Record calls (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailsend",
									"value": "",
									"description": "Send E-mail (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailattach",
									"value": "",
									"description": "Attach (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmaildelete",
									"value": "",
									"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acc_slave",
									"value": "0",
									"description": "Slave (hints) (Yes=1, No=0)"
								},
								{
									"key": "slave_accountcode",
									"value": "",
									"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": "",
									"description": "Send E-mail with account details (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "service_plan_date",
									"value": "",
									"description": "Service Plan Date (dd-mm-YYYY)",
									"disabled": true
								},
								{
									"key": "limitenable",
									"value": "1",
									"description": "Enable Limits (Yes=1, No=0)"
								},
								{
									"key": "limittype",
									"value": "Monthly",
									"description": "Limit Type (Daily, Monthly)"
								},
								{
									"key": "softlimit",
									"value": "20",
									"description": "Soft Limit (number, 5 digits max)"
								},
								{
									"key": "hardlimit",
									"value": "10",
									"description": "Hard Limit (number, 5 digits max)"
								},
								{
									"key": "notification_email",
									"value": "test@test.com",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "PIN Based Device PIN (number, 5 digits)",
									"disabled": true
								},
								{
									"key": "cf_billing_disable",
									"value": "",
									"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "webrtc",
									"value": "",
									"description": "(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption (yes,offer)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "callingpres",
									"value": "",
									"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
									"disabled": true
								},
								{
									"key": "cid_anon",
									"value": "",
									"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "ringtoneforlocalcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "ringtonefortransferredcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "pai_header",
									"value": "",
									"description": "(Regex: /^\\\\w{1,64}$/)",
									"disabled": true
								},
								{
									"key": "callgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "pickupgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "primary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "limit_notify_play_sound",
									"value": "",
									"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "limit_notify_send_email",
									"value": "",
									"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "busyvoicemail",
									"value": "",
									"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "mailboxes",
									"value": "",
									"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
									"disabled": true
								},
								{
									"key": "vmailpager",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vmailskipinst",
									"value": "",
									"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailsaycid",
									"value": "",
									"description": "Say CallerID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailreview",
									"value": "",
									"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailoperator",
									"value": "",
									"description": "Allow Operator: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailenvelope",
									"value": "",
									"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailhidefromdir",
									"value": "",
									"description": "Hide from directory: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video Support: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmaildelay",
									"value": "",
									"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailopext",
									"value": "",
									"description": "Operator Extension. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailnrings",
									"value": "",
									"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "force_codec",
									"value": "",
									"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
									"disabled": true
								},
								{
									"key": "hd_logout_time",
									"value": "",
									"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
									"disabled": true
								},
								{
									"key": "record_beep_ext",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "busylevel_incoming",
									"value": "",
									"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "show_in_dir",
									"value": "",
									"description": "Show In Directory (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "show_in_app",
									"value": "",
									"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "additional_config",
									"value": "",
									"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "ua_autoprov",
									"value": "",
									"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "vmailskippin",
									"value": "",
									"description": "(Yes=1, No=0, Not Set=2)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "128:Add Extension 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"ExtID2\", responseBody.id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{TenantID}}&name={{ExtName2}}&email={{ExtEmail2}}&ext={{ExtNumber2}}&location=2&ua=50&secret={{ExtSecret}}&pin={{ExtPin}}&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key"
								},
								{
									"key": "action",
									"value": "pbxware.ext.add",
									"description": "Action"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{ExtName2}}",
									"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "email",
									"value": "{{ExtEmail2}}",
									"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "ext",
									"value": "{{ExtNumber2}}",
									"description": "Extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "location",
									"value": "2",
									"description": "Location (Local=1, Remote=2) (Required)"
								},
								{
									"key": "ua",
									"value": "50",
									"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
								},
								{
									"key": "secret",
									"value": "{{ExtSecret}}",
									"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "pin",
									"value": "{{ExtPin}}",
									"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
								},
								{
									"key": "prot",
									"value": "sip",
									"description": "Protocol ('sip' and 'iax' only!) (Required)"
								},
								{
									"key": "status",
									"value": "1",
									"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "2",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "2",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemail",
									"value": "1",
									"description": "Voicemail (Yes=1, No=0) (Required)"
								},
								{
									"key": "title",
									"value": "",
									"description": "Title. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "uad_sipheaders",
									"value": "",
									"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
									"disabled": true
								},
								{
									"key": "label",
									"value": "",
									"description": "Label. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_location",
									"value": "",
									"description": "User Location. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_language",
									"value": "",
									"description": "User lenguage. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authentification name. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
									"disabled": true
								},
								{
									"key": "billing",
									"value": "",
									"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
									"disabled": true
								},
								{
									"key": "call_rating",
									"value": "",
									"description": "Call Rating (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "creditlimit",
									"value": "",
									"description": "Credit limit (number, 12 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "reminderbalance",
									"value": "",
									"description": "Reminder balance (number, 5 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Service Plan ID (required if Billing=1)",
									"disabled": true
								},
								{
									"key": "nat",
									"value": "",
									"description": "NAT (Yes=1, No=0, Never=2)",
									"disabled": true
								},
								{
									"key": "canreinvite",
									"value": "",
									"description": "SIP Re-INVITE support (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify (4 digits max)",
									"disabled": true
								},
								{
									"key": "ringtime",
									"value": "",
									"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
									"disabled": true
								},
								{
									"key": "incoming_dialoptions",
									"value": "",
									"description": "(Regex: /^[0tTr]+$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "(Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "autoprovisiong",
									"value": "",
									"description": "Auto provisioning (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "dhcp",
									"value": "",
									"description": "DHCP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "staticip",
									"value": "",
									"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "netmask",
									"value": "",
									"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "gateway",
									"value": "",
									"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns1",
									"value": "",
									"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns2",
									"value": "",
									"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "macaddress",
									"value": "",
									"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
									"disabled": true
								},
								{
									"key": "voicemail_timezone",
									"value": "",
									"description": "Voicemail timezone (Germany, USA…​). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "vm_greeting_message",
									"value": "",
									"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
									"disabled": true
								},
								{
									"key": "setcallerid",
									"value": "",
									"description": "Set CallerID (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acodecs",
									"value": "",
									"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycom’s Default\n5 - Sipura\n6 - Snom phones",
									"disabled": true
								},
								{
									"key": "page_custom",
									"value": "",
									"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "recordcalls",
									"value": "",
									"description": "Record calls (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailsend",
									"value": "",
									"description": "Send E-mail (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailattach",
									"value": "",
									"description": "Attach (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmaildelete",
									"value": "",
									"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acc_slave",
									"value": "1",
									"description": "Slave (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "slave_accountcode",
									"value": "",
									"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": "",
									"description": "Send E-mail with account details (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "service_plan_date",
									"value": "",
									"description": "Service Plan Date (dd-mm-YYYY)",
									"disabled": true
								},
								{
									"key": "limitenable",
									"value": "",
									"description": "Enable Limits (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "limittype",
									"value": "",
									"description": "Limit Type (Daily, Monthly)",
									"disabled": true
								},
								{
									"key": "softlimit",
									"value": "",
									"description": "Soft Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "hardlimit",
									"value": "",
									"description": "Hard Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "PIN Based Device PIN (number, 5 digits)",
									"disabled": true
								},
								{
									"key": "cf_billing_disable",
									"value": "",
									"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "webrtc",
									"value": "",
									"description": "(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption (yes,offer)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "callingpres",
									"value": "",
									"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
									"disabled": true
								},
								{
									"key": "cid_anon",
									"value": "",
									"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "ringtoneforlocalcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "ringtonefortransferredcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "pai_header",
									"value": "",
									"description": "(Regex: /^\\\\w{1,64}$/)",
									"disabled": true
								},
								{
									"key": "callgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "pickupgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "primary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "limit_notify_play_sound",
									"value": "",
									"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "limit_notify_send_email",
									"value": "",
									"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "busyvoicemail",
									"value": "",
									"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "mailboxes",
									"value": "",
									"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
									"disabled": true
								},
								{
									"key": "vmailpager",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vmailskipinst",
									"value": "",
									"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailsaycid",
									"value": "",
									"description": "Say CallerID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailreview",
									"value": "",
									"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailoperator",
									"value": "",
									"description": "Allow Operator: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailenvelope",
									"value": "",
									"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailhidefromdir",
									"value": "",
									"description": "Hide from directory: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video Support: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmaildelay",
									"value": "",
									"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailopext",
									"value": "",
									"description": "Operator Extension. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailnrings",
									"value": "",
									"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "force_codec",
									"value": "",
									"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
									"disabled": true
								},
								{
									"key": "hd_logout_time",
									"value": "",
									"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
									"disabled": true
								},
								{
									"key": "record_beep_ext",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "busylevel_incoming",
									"value": "",
									"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "show_in_dir",
									"value": "",
									"description": "Show In Directory (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "show_in_app",
									"value": "",
									"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "additional_config",
									"value": "",
									"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "ua_autoprov",
									"value": "",
									"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "vmailskippin",
									"value": "",
									"description": "(Yes=1, No=0, Not Set=2)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "129:Add Extension 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"ExtID3\", responseBody.id);",
									"",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{TenantID}}&name={{ExtName3}}&email=ext903@test.com&ext=903&location=2&ua=50&secret=Test123!&pin=1111&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key"
								},
								{
									"key": "action",
									"value": "pbxware.ext.add",
									"description": "Action"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "{{ExtName3}}",
									"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "email",
									"value": "ext903@test.com",
									"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "ext",
									"value": "903",
									"description": "Extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "location",
									"value": "2",
									"description": "Location (Local=1, Remote=2) (Required)"
								},
								{
									"key": "ua",
									"value": "50",
									"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
								},
								{
									"key": "secret",
									"value": "Test123!",
									"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "pin",
									"value": "1111",
									"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
								},
								{
									"key": "prot",
									"value": "sip",
									"description": "Protocol ('sip' and 'iax' only!) (Required)"
								},
								{
									"key": "status",
									"value": "1",
									"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "2",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "2",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemail",
									"value": "1",
									"description": "Voicemail (Yes=1, No=0) (Required)"
								},
								{
									"key": "title",
									"value": "",
									"description": "Title. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "uad_sipheaders",
									"value": "",
									"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
									"disabled": true
								},
								{
									"key": "label",
									"value": "",
									"description": "Label. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_location",
									"value": "",
									"description": "User Location. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_language",
									"value": "",
									"description": "User lenguage. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authentification name. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
									"disabled": true
								},
								{
									"key": "billing",
									"value": "",
									"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
									"disabled": true
								},
								{
									"key": "call_rating",
									"value": "",
									"description": "Call Rating (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "creditlimit",
									"value": "",
									"description": "Credit limit (number, 12 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "reminderbalance",
									"value": "",
									"description": "Reminder balance (number, 5 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Service Plan ID (required if Billing=1)",
									"disabled": true
								},
								{
									"key": "nat",
									"value": "",
									"description": "NAT (Yes=1, No=0, Never=2)",
									"disabled": true
								},
								{
									"key": "canreinvite",
									"value": "",
									"description": "SIP Re-INVITE support (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify (4 digits max)",
									"disabled": true
								},
								{
									"key": "ringtime",
									"value": "",
									"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
									"disabled": true
								},
								{
									"key": "incoming_dialoptions",
									"value": "",
									"description": "(Regex: /^[0tTr]+$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "(Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "autoprovisiong",
									"value": "",
									"description": "Auto provisioning (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "dhcp",
									"value": "",
									"description": "DHCP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "staticip",
									"value": "",
									"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "netmask",
									"value": "",
									"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "gateway",
									"value": "",
									"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns1",
									"value": "",
									"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns2",
									"value": "",
									"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "macaddress",
									"value": "",
									"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
									"disabled": true
								},
								{
									"key": "voicemail_timezone",
									"value": "",
									"description": "Voicemail timezone (Germany, USA…​). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "vm_greeting_message",
									"value": "",
									"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
									"disabled": true
								},
								{
									"key": "setcallerid",
									"value": "",
									"description": "Set CallerID (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acodecs",
									"value": "",
									"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycom’s Default\n5 - Sipura\n6 - Snom phones",
									"disabled": true
								},
								{
									"key": "page_custom",
									"value": "",
									"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "recordcalls",
									"value": "",
									"description": "Record calls (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailsend",
									"value": "",
									"description": "Send E-mail (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailattach",
									"value": "",
									"description": "Attach (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmaildelete",
									"value": "",
									"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acc_slave",
									"value": "1",
									"description": "Slave (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "slave_accountcode",
									"value": "",
									"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": "",
									"description": "Send E-mail with account details (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "service_plan_date",
									"value": "",
									"description": "Service Plan Date (dd-mm-YYYY)",
									"disabled": true
								},
								{
									"key": "limitenable",
									"value": "",
									"description": "Enable Limits (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "limittype",
									"value": "",
									"description": "Limit Type (Daily, Monthly)",
									"disabled": true
								},
								{
									"key": "softlimit",
									"value": "",
									"description": "Soft Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "hardlimit",
									"value": "",
									"description": "Hard Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "PIN Based Device PIN (number, 5 digits)",
									"disabled": true
								},
								{
									"key": "cf_billing_disable",
									"value": "",
									"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "webrtc",
									"value": "",
									"description": "(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption (yes,offer)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "callingpres",
									"value": "",
									"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
									"disabled": true
								},
								{
									"key": "cid_anon",
									"value": "",
									"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "ringtoneforlocalcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "ringtonefortransferredcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "pai_header",
									"value": "",
									"description": "(Regex: /^\\\\w{1,64}$/)",
									"disabled": true
								},
								{
									"key": "callgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "pickupgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "primary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "limit_notify_play_sound",
									"value": "",
									"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "limit_notify_send_email",
									"value": "",
									"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "busyvoicemail",
									"value": "",
									"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "mailboxes",
									"value": "",
									"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
									"disabled": true
								},
								{
									"key": "vmailpager",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vmailskipinst",
									"value": "",
									"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailsaycid",
									"value": "",
									"description": "Say CallerID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailreview",
									"value": "",
									"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailoperator",
									"value": "",
									"description": "Allow Operator: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailenvelope",
									"value": "",
									"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailhidefromdir",
									"value": "",
									"description": "Hide from directory: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video Support: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmaildelay",
									"value": "",
									"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailopext",
									"value": "",
									"description": "Operator Extension. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailnrings",
									"value": "",
									"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "force_codec",
									"value": "",
									"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
									"disabled": true
								},
								{
									"key": "hd_logout_time",
									"value": "",
									"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
									"disabled": true
								},
								{
									"key": "record_beep_ext",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "busylevel_incoming",
									"value": "",
									"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "show_in_dir",
									"value": "",
									"description": "Show In Directory (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "show_in_app",
									"value": "",
									"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "additional_config",
									"value": "",
									"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "ua_autoprov",
									"value": "",
									"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "vmailskippin",
									"value": "",
									"description": "(Yes=1, No=0, Not Set=2)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "542:Add Extension 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"ExtID4\", responseBody.id);",
									"",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.add&server={{TenantID}}&name=Ext914&email=ext914@test.com&ext=914&location=2&ua=50&secret=Test123!&pin=1111&prot=sip&status=1&incominglimit=2&outgoinglimit=2&voicemail=1&macaddress=fc5c84414a6f&sso_enabled=1&disable_fax_for_app=0&disable_my_dialer_for_app=1&app_default_client_phone=deskphone",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key"
								},
								{
									"key": "action",
									"value": "pbxware.ext.add",
									"description": "Action"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "Ext914",
									"description": "Full Name (Required) (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "email",
									"value": "ext914@test.com",
									"description": "E-mail (Required) (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "ext",
									"value": "914",
									"description": "Extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "location",
									"value": "2",
									"description": "Location (Local=1, Remote=2) (Required)"
								},
								{
									"key": "ua",
									"value": "50",
									"description": "User Agent Device ID (number only) (Required) (50 is for Generic SIP)"
								},
								{
									"key": "secret",
									"value": "Test123!",
									"description": "Password (Required). (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "pin",
									"value": "1111",
									"description": "PIN (Required). (Regex: /^\\\\d{4,4}$/)"
								},
								{
									"key": "prot",
									"value": "sip",
									"description": "Protocol ('sip' and 'iax' only!) (Required)"
								},
								{
									"key": "status",
									"value": "1",
									"description": "Status (Active=1, Not Active=0, Suspended=2) (Required)"
								},
								{
									"key": "incominglimit",
									"value": "2",
									"description": "Incoming limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "2",
									"description": "Outgoing limit (Required). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemail",
									"value": "1",
									"description": "Voicemail (Yes=1, No=0) (Required)"
								},
								{
									"key": "title",
									"value": "",
									"description": "Title. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "uad_sipheaders",
									"value": "",
									"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)",
									"disabled": true
								},
								{
									"key": "label",
									"value": "",
									"description": "Label. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_location",
									"value": "",
									"description": "User Location. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "user_language",
									"value": "",
									"description": "User lenguage. (Regex: /^.{1,60}$/)",
									"disabled": true
								},
								{
									"key": "authname",
									"value": "",
									"description": "Authentification name. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "auth",
									"value": "",
									"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)",
									"disabled": true
								},
								{
									"key": "billing",
									"value": "",
									"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
									"disabled": true
								},
								{
									"key": "call_rating",
									"value": "",
									"description": "Call Rating (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "creditlimit",
									"value": "",
									"description": "Credit limit (number, 12 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "reminderbalance",
									"value": "",
									"description": "Reminder balance (number, 5 digits max, required if Billing=1)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Service Plan ID (required if Billing=1)",
									"disabled": true
								},
								{
									"key": "nat",
									"value": "",
									"description": "NAT (Yes=1, No=0, Never=2)",
									"disabled": true
								},
								{
									"key": "canreinvite",
									"value": "",
									"description": "SIP Re-INVITE support (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "qualify",
									"value": "",
									"description": "Qualify (4 digits max)",
									"disabled": true
								},
								{
									"key": "ringtime",
									"value": "",
									"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)",
									"disabled": true
								},
								{
									"key": "incoming_dialoptions",
									"value": "",
									"description": "(Regex: /^[0tTr]+$/)",
									"disabled": true
								},
								{
									"key": "outgoing_dialoptions",
									"value": "",
									"description": "(Regex: /^[tTr]+$/)",
									"disabled": true
								},
								{
									"key": "autoprovisiong",
									"value": "",
									"description": "Auto provisioning (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "dhcp",
									"value": "",
									"description": "DHCP (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "staticip",
									"value": "",
									"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "netmask",
									"value": "",
									"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "gateway",
									"value": "",
									"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns1",
									"value": "",
									"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "dns2",
									"value": "",
									"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "macaddress",
									"value": "fc5c84414a6f",
									"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)"
								},
								{
									"key": "voicemail_timezone",
									"value": "",
									"description": "Voicemail timezone (Germany, USA…​). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "vm_greeting_message",
									"value": "",
									"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)",
									"disabled": true
								},
								{
									"key": "setcallerid",
									"value": "",
									"description": "Set CallerID (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acodecs",
									"value": "",
									"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycom’s Default\n5 - Sipura\n6 - Snom phones",
									"disabled": true
								},
								{
									"key": "page_custom",
									"value": "",
									"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)",
									"disabled": true
								},
								{
									"key": "recordcalls",
									"value": "",
									"description": "Record calls (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "recordsilent",
									"value": "",
									"description": "Silent recording (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailsend",
									"value": "",
									"description": "Send E-mail (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmailattach",
									"value": "",
									"description": "Attach (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "vmaildelete",
									"value": "",
									"description": "Delete After E-mailing (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "acc_slave",
									"value": "1",
									"description": "Slave (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "slave_accountcode",
									"value": "",
									"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": "",
									"description": "Send E-mail with account details (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "service_plan_date",
									"value": "",
									"description": "Service Plan Date (dd-mm-YYYY)",
									"disabled": true
								},
								{
									"key": "limitenable",
									"value": "",
									"description": "Enable Limits (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "limittype",
									"value": "",
									"description": "Limit Type (Daily, Monthly)",
									"disabled": true
								},
								{
									"key": "softlimit",
									"value": "",
									"description": "Soft Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "hardlimit",
									"value": "",
									"description": "Hard Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "PIN Based Device PIN (number, 5 digits)",
									"disabled": true
								},
								{
									"key": "cf_billing_disable",
									"value": "",
									"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "webrtc",
									"value": "",
									"description": "(Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "defaultip",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "max_contacts",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "encryption",
									"value": "",
									"description": "Encryption (yes,offer)",
									"disabled": true
								},
								{
									"key": "directrtpsetup",
									"value": "",
									"description": "Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "callingpres",
									"value": "",
									"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)",
									"disabled": true
								},
								{
									"key": "cid_anon",
									"value": "",
									"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "ringtoneforlocalcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "ringtonefortransferredcalls",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)",
									"disabled": true
								},
								{
									"key": "cidmatchdid",
									"value": "",
									"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "dropanonymous",
									"value": "",
									"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "trustrpid",
									"value": "",
									"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "sendrpid",
									"value": "",
									"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)",
									"disabled": true
								},
								{
									"key": "trust_id_outbound",
									"value": "",
									"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_connectedline",
									"value": "",
									"description": "Connected Line Updates: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "rpid_update",
									"value": "",
									"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "pai_header",
									"value": "",
									"description": "(Regex: /^\\\\w{1,64}$/)",
									"disabled": true
								},
								{
									"key": "callgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "pickupgroup",
									"value": "",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)",
									"disabled": true
								},
								{
									"key": "primary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "primary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)",
									"disabled": true
								},
								{
									"key": "busylevel",
									"value": "",
									"description": "(Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "limit_notify_play_sound",
									"value": "",
									"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "limit_notify_send_email",
									"value": "",
									"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "busyvoicemail",
									"value": "",
									"description": "Greeting-Mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "mailboxes",
									"value": "",
									"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)",
									"disabled": true
								},
								{
									"key": "vmailpager",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "vmailskipinst",
									"value": "",
									"description": "Skip Instructions: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailsaycid",
									"value": "",
									"description": "Say CallerID: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailreview",
									"value": "",
									"description": "Allow Review mode: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailoperator",
									"value": "",
									"description": "Allow Operator: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailenvelope",
									"value": "",
									"description": "Play Envelope message: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmailhidefromdir",
									"value": "",
									"description": "Hide from directory: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "videosupport",
									"value": "",
									"description": "Video Support: Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "autoframing",
									"value": "",
									"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2",
									"disabled": true
								},
								{
									"key": "vmaildelay",
									"value": "",
									"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailopext",
									"value": "",
									"description": "Operator Extension. (Regex: /^[0-9]+$/)",
									"disabled": true
								},
								{
									"key": "vmailnrings",
									"value": "",
									"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "force_codec",
									"value": "",
									"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)",
									"disabled": true
								},
								{
									"key": "hd_logout_time",
									"value": "",
									"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)",
									"disabled": true
								},
								{
									"key": "record_beep_ext",
									"value": "",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "pbd_pin",
									"value": "",
									"description": "Pin Based Dialing Pin (Must be enabled in license). (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "(Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "busylevel_incoming",
									"value": "",
									"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)",
									"disabled": true
								},
								{
									"key": "jbimpl",
									"value": "",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)",
									"disabled": true
								},
								{
									"key": "jbmaxsize",
									"value": "",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "jbresyncthreshold",
									"value": "",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "jbtargetextra",
									"value": "",
									"description": "Target extra: (Regex: /^\\\\d{1,4}$/)",
									"disabled": true
								},
								{
									"key": "show_in_dir",
									"value": "",
									"description": "Show In Directory (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "show_in_app",
									"value": "",
									"description": "Show in Desktop/Mobile App (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "additional_config",
									"value": "",
									"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "ua_autoprov",
									"value": "",
									"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "vmailskippin",
									"value": "",
									"description": "(Yes=1, No=0, Not Set=2)",
									"disabled": true
								},
								{
									"key": "rating_info_osc",
									"value": "",
									"description": "Show Call Rating Info in OSC. (Yes=1, No=0).",
									"disabled": true
								},
								{
									"key": "sso_enabled",
									"value": "1",
									"description": "Single Sign-On enabled (Yes=1, No=0)"
								},
								{
									"key": "disable_fax_for_app",
									"value": "0",
									"description": "Disable FAX for gloCOM (Yes=1, No=0, NotSet = 2)"
								},
								{
									"key": "disable_my_dialer_for_app",
									"value": "1",
									"description": "Disable Personal Dialer for gloCOM (Yes=1, No =0, NotSet = 2)"
								},
								{
									"key": "app_default_client_phone",
									"value": "deskphone",
									"description": "Default Client Phone. (Regex: /^(|softphone|deskphone)$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "544:Editing Extension 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('ext').that.is.a('number');",
									"    });",
									"",
									"    // Print the success message and extension ID from the response",
									"    console.log(responseBody.success);",
									"    console.log(\"Extension ID:\", responseBody.id);",
									"",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.edit&server={{TenantID}}&id={{ExtID4}}&name=NewNameExt4&email=sinisabicom1@gmail.com&ext=915&location=1&ua=127&secret=NewPassword1234!-_!%*&password=Password_-12!%*&pin=9876&prot=iax&status=2&incominglimit=10&outgoinglimit=5&voicemail=1&title=TestExtension&uad_sipheaders=SomeText&label=NewLabel&user_location=Cloud&user_language=English&dtmfmode=inband&authname=admin&auth=admin@admin.com&nat=2&canreinvite=1&qualify=5000&ringtime=20&incoming_dialoptions=Tr&outgoing_dialoptions=t&autoprovisiong=1&dhcp=0&staticip=123.123.123.123&netmask=255.255.0.0&gateway=123.123.123.1&dns1=8.8.8.8&dns2=123.123.123.2&voicemail_timezone=Bosnia and Herzegovina&vm_greeting_message=1&setcallerid=0&acodecs=gsm:alaw:h261&page=4&page_custom=Text123&recordcalls=1&recordsilent=1&vmailsend=1&vmailattach=1&vmaildelete=1&send_email=1&webrtc=1&defaultip=163.20.227.168&max_contacts=10&encryption=yes&directrtpsetup=1&callingpres=allowed_failed_screen&cid_anon=1&ringtoneforlocalcalls=Ringtone1&ringtonefortransferredcalls=Ringtone2&cidmatchdid=1&dropanonymous=0&trustrpid=1&sendrpid=pai&trust_id_outbound=1&rpid_connectedline=0&rpid_update=1&pai_header=Header1&callgroup=3&pickupgroup=1,2,3&primary_trunk={{TrunkID1}}&secondary_trunk={{TrunkID2}}&tertiary_trunk={{TrunkID3}}&primary_emerg_trunk={{TrunkID4}}&secondary_emerg_trunk={{TrunkID2}}&tertiary_emerg_trunk={{TrunkID1}}&override_lcr=1&busylevel=12&limit_notify_play_sound=1&limit_notify_send_email=1&busyvoicemail=1&mailboxes={{ExtNumber2}},{{ExtNumber3}}&vmailpager=neki@email.com&vmailskipinst=1&vmailsaycid=1&vmailreview=1&vmailoperator=0&vmailenvelope=0&vmailhidefromdir=0&videosupport=1&autoframing=1&vmaildelay=15&vmailopext=903&vmailnrings=2&force_codec=opus&hd_logout_time=1&record_beep_ext=20&pbd_pin=98765&areacode=789&busylevel_incoming=2&jbimpl=fixed&jbmaxsize=30&jbresyncthreshold=15&jbtargetextra=1234&show_in_dir=1&show_in_app=1&vmailskippin=0&rating_info_osc=1&sso_enabled=0&disable_fax_for_app=1&disable_my_dialer_for_app=0&app_default_client_phone=softphone",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key"
								},
								{
									"key": "action",
									"value": "pbxware.ext.edit"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ExtID4}}",
									"description": "Extension IDs (Required) (Use CSV file ExtensionIDs.csv to edit multiple extensions)"
								},
								{
									"key": "name",
									"value": "NewNameExt4",
									"description": "Full Name (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "email",
									"value": "sinisabicom1@gmail.com",
									"description": "E-mail (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "ext",
									"value": "915",
									"description": "Extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "location",
									"value": "1",
									"description": "Location (Local=1, Remote=2)"
								},
								{
									"key": "ua",
									"value": "127",
									"description": "User Agent Device ID (number only) (50 is for Generic SIP)"
								},
								{
									"key": "secret",
									"value": "NewPassword1234!-_!%*",
									"description": "Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "password",
									"value": "Password_-12!%*",
									"description": "User Password. (Regex: /^[a-zA-Z0-9%\\\\$\\\\*!@\\\\_\\\\-]+$/)"
								},
								{
									"key": "pin",
									"value": "9876",
									"description": "PIN. (Regex: /^\\\\d{4,4}$/)"
								},
								{
									"key": "prot",
									"value": "iax",
									"description": "Protocol ('sip' and 'iax' only!)"
								},
								{
									"key": "status",
									"value": "2",
									"description": "Status (Active=1, Not Active=0, Suspended=2)"
								},
								{
									"key": "incominglimit",
									"value": "10",
									"description": "Incoming limit. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "outgoinglimit",
									"value": "5",
									"description": "Outgoing limit. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "voicemail",
									"value": "1",
									"description": "Voicemail (Yes=1, No=0)"
								},
								{
									"key": "title",
									"value": "TestExtension",
									"description": "Title. (Regex: /^.{1,60}$/)"
								},
								{
									"key": "uad_sipheaders",
									"value": "SomeText",
									"description": "Check for UAD SIP Headers. (Regex: /[\\\\w\\\\-,]+/)"
								},
								{
									"key": "label",
									"value": "NewLabel",
									"description": "Label. (Regex: /^.{1,60}$/)"
								},
								{
									"key": "user_location",
									"value": "Cloud",
									"description": "User Location. (Regex: /^.{1,60}$/)"
								},
								{
									"key": "user_language",
									"value": "English",
									"description": "User lenguage. (Regex: /^.{1,60}$/)"
								},
								{
									"key": "department",
									"value": "",
									"description": "Department ID. (Regex: /^[\\\\d,]+$/).",
									"disabled": true
								},
								{
									"key": "dtmfmode",
									"value": "inband",
									"description": "DTMF Mode (auto, inband, rfc2833, info)."
								},
								{
									"key": "authname",
									"value": "admin",
									"description": "Authentification name. (Regex: /^\\\\w+$/)"
								},
								{
									"key": "auth",
									"value": "admin@admin.com",
									"description": "(Regex: /^(\\\\S+)(:\\\\S+)?@\\\\S+$/)"
								},
								{
									"key": "billing",
									"value": "",
									"description": "Call Rating (Yes=1, No=0) (deprecated and will be soon replaced with call_rating)",
									"disabled": true
								},
								{
									"key": "call_rating",
									"value": "",
									"description": "Call Rating (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "creditlimit",
									"value": "",
									"description": "Credit limit (number, 12 digits max, required if Billing/Call_Rating=1)",
									"disabled": true
								},
								{
									"key": "reminderbalance",
									"value": "",
									"description": "Reminder balance (number, 5 digits max, required if Billing/Call_Rating=1)",
									"disabled": true
								},
								{
									"key": "service_plan",
									"value": "",
									"description": "Service Plan ID (required if Billing/Call_Rating=1)",
									"disabled": true
								},
								{
									"key": "nat",
									"value": "2",
									"description": "NAT (Yes=1, No=0, Never=2)"
								},
								{
									"key": "canreinvite",
									"value": "1",
									"description": "SIP Re-INVITE support (Yes=1, No=0)"
								},
								{
									"key": "qualify",
									"value": "5000",
									"description": "Qualify (4 digits max)"
								},
								{
									"key": "ringtime",
									"value": "20",
									"description": "Ring time seconds (2 digits max). (Regex: /^\\\\d{0,2}$/)"
								},
								{
									"key": "incoming_dialoptions",
									"value": "Tr",
									"description": "(Regex: /^[0tTr]+$/)"
								},
								{
									"key": "outgoing_dialoptions",
									"value": "t",
									"description": "(Regex: /^[tTr]+$/)"
								},
								{
									"key": "autoprovisiong",
									"value": "1",
									"description": "Auto provisioning (Yes=1, No=0)"
								},
								{
									"key": "dhcp",
									"value": "0",
									"description": "DHCP (Yes=1, No=0)"
								},
								{
									"key": "staticip",
									"value": "123.123.123.123",
									"description": "Provisioning Static IP address. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "netmask",
									"value": "255.255.0.0",
									"description": "Provisioning netmask. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "gateway",
									"value": "123.123.123.1",
									"description": "Provisioning gateway. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "dns1",
									"value": "8.8.8.8",
									"description": "Provisioning DNS 1. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "dns2",
									"value": "123.123.123.2",
									"description": "Provisioning DNS 2. (Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "macaddress",
									"value": "fc5c84414a6f",
									"description": "User Agent device MAC address. (Regex: /^[0-9a-fA-F]{12}$/)",
									"disabled": true
								},
								{
									"key": "voicemail_timezone",
									"value": "Bosnia and Herzegovina",
									"description": "Voicemail timezone (Germany, USA…​). (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "vm_greeting_message",
									"value": "1",
									"description": "Voicemail Greeting Message (Unavailable=0, Busy=1, None=2)"
								},
								{
									"key": "setcallerid",
									"value": "0",
									"description": "Set CallerID (Yes=1, No=0)"
								},
								{
									"key": "acodecs",
									"value": "gsm:alaw:h261",
									"description": "Allowed codecs separated with :: ulaw:alaw:g723.1:g726:g729:gsm:ilbc:speex:lpc10:h261:h263:h263p"
								},
								{
									"key": "page",
									"value": "4",
									"description": "Speakerphone paging header, one of following values are valid:\n(empty) - Custom Header\n2 - Aastra 480i 9112i 9133i\n4 - Polycom’s Default\n5 - Sipura\n6 - Snom phones"
								},
								{
									"key": "page_custom",
									"value": "Text123",
									"description": "Custom page header (text). (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "recordcalls",
									"value": "1",
									"description": "Record calls (Yes=1, No=0)"
								},
								{
									"key": "recordsilent",
									"value": "1",
									"description": "Silent recording (Yes=1, No=0)"
								},
								{
									"key": "vmailsend",
									"value": "1",
									"description": "Send E-mail (hints) (Yes=1, No=0)"
								},
								{
									"key": "vmailattach",
									"value": "1",
									"description": "Attach (hints) (Yes=1, No=0)"
								},
								{
									"key": "vmaildelete",
									"value": "1",
									"description": "Delete After E-mailing (hints) (Yes=1, No=0)"
								},
								{
									"key": "acc_slave",
									"value": "",
									"description": "Slave (hints) (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "slave_accountcode",
									"value": "",
									"description": "Master Account Code. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "send_email",
									"value": "1",
									"description": "Send E-mail with account details (Yes=1, No=0)"
								},
								{
									"key": "service_plan_date",
									"value": "",
									"description": "Service Plan Date (dd-mm-YYYY)",
									"disabled": true
								},
								{
									"key": "limitenable",
									"value": "",
									"description": "Enable Limits (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "limittype",
									"value": "",
									"description": "Limit Type (Daily, Monthly)",
									"disabled": true
								},
								{
									"key": "softlimit",
									"value": "",
									"description": "Soft Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "hardlimit",
									"value": "",
									"description": "Hard Limit (number, 5 digits max)",
									"disabled": true
								},
								{
									"key": "notification_email",
									"value": "",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "cf_billing_disable",
									"value": "",
									"description": "(deprecated and will be soon replaced with cf_call_rating_disable)",
									"disabled": true
								},
								{
									"key": "cf_call_rating_disable",
									"value": "",
									"description": "Disable Call Rating for Call Forwarding. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "webrtc",
									"value": "1",
									"description": "(Regex: /^(1|0|2)$/)"
								},
								{
									"key": "defaultip",
									"value": "163.20.227.168",
									"description": "(Regex: /^\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}.\\\\d{1,3}$/)"
								},
								{
									"key": "max_contacts",
									"value": "10",
									"description": "(Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "encryption",
									"value": "yes",
									"description": "Encryption (yes,offer)"
								},
								{
									"key": "directrtpsetup",
									"value": "1",
									"description": "Yes=1, No=0, Not Set=2"
								},
								{
									"key": "callingpres",
									"value": "allowed_failed_screen",
									"description": "CallerID Presentation. (Regex: /^(allowed_not_screened|allowed_passed_screen|allowed_failed_screen|allowed|prohib_not_screened|prohib_passed_screen|prohib_failed_screen|prohib|unavailable)$/)"
								},
								{
									"key": "cid_anon",
									"value": "1",
									"description": "Hide CallerID for Anonymous calls. Yes=1, No=0, Not Set=2"
								},
								{
									"key": "ringtoneforlocalcalls",
									"value": "Ringtone1",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)"
								},
								{
									"key": "ringtonefortransferredcalls",
									"value": "Ringtone2",
									"description": "(Regex: /^[a-zA-Z0-9._-]+$/)"
								},
								{
									"key": "cidmatchdid",
									"value": "1",
									"description": "Only Allow Trunk CallerID within DID range. Yes=1, No=0, Not Set=2"
								},
								{
									"key": "dropanonymous",
									"value": "0",
									"description": "Drop Anonymous calls: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "trustrpid",
									"value": "1",
									"description": "Trust Remote-Party-ID: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "sendrpid",
									"value": "pai",
									"description": "Send Remote-Party-ID. (Regex: /^(rpid|pai)$/)"
								},
								{
									"key": "trust_id_outbound",
									"value": "1",
									"description": "Send Caller ID in RPID for Anonymous calls: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "rpid_connectedline",
									"value": "0",
									"description": "Connected Line Updates: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "rpid_update",
									"value": "1",
									"description": "RPID with SIP UPDATE: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "pai_header",
									"value": "Header1",
									"description": "(Regex: /^\\\\w{1,64}$/)"
								},
								{
									"key": "callgroup",
									"value": "3",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)"
								},
								{
									"key": "pickupgroup",
									"value": "1,2,3",
									"description": "(Regex: /^([0-9]|[1-5][0-9]|6[0-3])(,([0-9]|[1-5][0-9]|6[0-3]))*$/)"
								},
								{
									"key": "primary_trunk",
									"value": "{{TrunkID1}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "secondary_trunk",
									"value": "{{TrunkID2}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tertiary_trunk",
									"value": "{{TrunkID3}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "primary_emerg_trunk",
									"value": "{{TrunkID4}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "secondary_emerg_trunk",
									"value": "{{TrunkID2}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tertiary_emerg_trunk",
									"value": "{{TrunkID1}}",
									"description": "(Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "override_lcr",
									"value": "1",
									"description": "Override LCR (Yes/No/NotSet). (Regex: /^(1|0|2)$/)."
								},
								{
									"key": "busylevel",
									"value": "12",
									"description": "(Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "limit_notify_play_sound",
									"value": "1",
									"description": "Play sound on exceeded limit: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "limit_notify_send_email",
									"value": "1",
									"description": "Send e-mail on exceeded limit: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "busyvoicemail",
									"value": "1",
									"description": "Greeting-Mode: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "mailboxes",
									"value": "{{ExtNumber2}},{{ExtNumber3}}",
									"description": "MWI extensions (comma separated). (Regex: /^[0-9,]+$/)"
								},
								{
									"key": "vmailpager",
									"value": "neki@email.com",
									"description": "(Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)"
								},
								{
									"key": "vmailskipinst",
									"value": "1",
									"description": "Skip Instructions: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmailsaycid",
									"value": "1",
									"description": "Say CallerID: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmailreview",
									"value": "1",
									"description": "Allow Review mode: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmailoperator",
									"value": "0",
									"description": "Allow Operator: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmailenvelope",
									"value": "0",
									"description": "Play Envelope message: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmailhidefromdir",
									"value": "0",
									"description": "Hide from directory: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "videosupport",
									"value": "1",
									"description": "Video Support: Yes=1, No=0, Not Set=2"
								},
								{
									"key": "autoframing",
									"value": "1",
									"description": "Auto-Framing (RTP Packetization): Yes=1, No=0, Not Set=2"
								},
								{
									"key": "vmaildelay",
									"value": "15",
									"description": "Voicemail Delay in sec. (Regex: /^[0-9]+$/)"
								},
								{
									"key": "vmailopext",
									"value": "903",
									"description": "Operator Extension. (Regex: /^[0-9]+$/)"
								},
								{
									"key": "vmailnrings",
									"value": "2",
									"description": "Rings to answer. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "force_codec",
									"value": "opus",
									"description": "Force codec on outbound trunk channel (ulaw, alaw, g722, opus, g723.1, g726, g726aal2, g729, gsm, ilbc, speex, speex16, speex32)"
								},
								{
									"key": "hd_logout_time",
									"value": "1",
									"description": "Automatic Logout (Hot Desking). (Regex: /^\\\\d$/)"
								},
								{
									"key": "record_beep_ext",
									"value": "20",
									"description": "Play Periodic Beep in sec. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "pbd_pin",
									"value": "98765",
									"description": "Pin Based Dialing Pin (Must be enabled in license) (number, 5 digits)"
								},
								{
									"key": "areacode",
									"value": "789",
									"description": "(Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "busylevel_incoming",
									"value": "2",
									"description": "Apply Busy Level for Incoming Calls (Yes=1, No=0, Not Set=2)"
								},
								{
									"key": "jbimpl",
									"value": "fixed",
									"description": "Jitter Buffer (inherit, disabled, fixed, adaptive)"
								},
								{
									"key": "jbmaxsize",
									"value": "30",
									"description": "Max length (ms). (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "jbresyncthreshold",
									"value": "15",
									"description": "Re-sync threshold. (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "jbtargetextra",
									"value": "1234",
									"description": "Target extra: (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "show_in_dir",
									"value": "1",
									"description": "Show In Directory (Yes=1, No=0)"
								},
								{
									"key": "show_in_app",
									"value": "1",
									"description": "Show in Desktop/Mobile App (Yes=1, No=0)"
								},
								{
									"key": "additional_config",
									"value": "",
									"description": "Additional config. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "ua_autoprov",
									"value": "",
									"description": "UAD Auto Provisioning Template. (Regex: /[\\\\s\\\\S]/)",
									"disabled": true
								},
								{
									"key": "vmailskippin",
									"value": "0",
									"description": "(Yes=1, No=0, Not Set=2)"
								},
								{
									"key": "rating_info_osc",
									"value": "1",
									"description": "Show Call Rating Info in OSC. (Yes=1, No=0)."
								},
								{
									"key": "sso_enabled",
									"value": "0",
									"description": "Single Sign-On enabled (Yes=1, No=0)"
								},
								{
									"key": "disable_fax_for_app",
									"value": "1",
									"description": "Disable FAX for gloCOM (Yes=1, No=0, NotSet = 2)"
								},
								{
									"key": "disable_my_dialer_for_app",
									"value": "0",
									"description": "Disable Personal Dialer for gloCOM (Yes=1, No =0, NotSet = 2)"
								},
								{
									"key": "app_default_client_phone",
									"value": "softphone",
									"description": "Default Client Phone. (Regex: /^(|softphone|deskphone)$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "130:Ext List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains an array of extensions",
									"    pm.test('Response Validation', function () {",
									"        var extensionKeys = Object.keys(responseBody);",
									"        pm.expect(extensionKeys).to.have.length.above(0);",
									"",
									"        // Store extension IDs in an array",
									"        var extensionIDs = [];",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('linenum').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_location').that.is.a('string');",
									"                    // 'macaddress' and 'department' are optional fields, so we will not perform type checks for them.",
									"                });",
									"",
									"                // Add the new extension ID to the array",
									"                extensionIDs.push(parseInt(extId));",
									"            }",
									"        }",
									"",
									"        // Save the extension IDs to the Postman environment variable",
									"        pm.environment.set('ExtensionIDs', JSON.stringify(extensionIDs));",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or tenant ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "131:Ext Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        for (var extId in responseBody) {",
									"            if (responseBody.hasOwnProperty(extId)) {",
									"                var extension = responseBody[extId];",
									"                pm.test('Extension ' + extId + ' Fields Validation', function () {",
									"                    pm.expect(extension).to.have.property('name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('email').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('pin').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('protocol').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('location').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('user_language').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_id').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_name').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('ua_fullname').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('status').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('smuser').that.is.a('string');",
									"                    pm.expect(extension).to.have.property('options').that.is.an('object');",
									"                    pm.expect(extension.options).to.have.property('type').that.is.a('string');",
									"                    pm.expect(extension.options).to.have.property('dtmfmode').that.is.a('string');",
									"                    // Add more checks for other fields in the 'options' object if needed",
									"                    // ...",
									"",
									"                    // 'options_raw', 'ua_autoprov', 'additional_macaddress', 'additional_config', and other fields are optional,",
									"                    // so we will not perform type checks for them.",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.configuration&server={{TenantID}}&id={{ExtID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.configuration"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "Extension ID of which we want to get configuration."
								},
								{
									"key": "ext",
									"value": "901",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "545:Ext4 Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        // Check if the response is an object",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate over each extension in the response",
									"        Object.keys(responseBody).forEach(function(extensionId) {",
									"            pm.test(\"Verify Extension \" + extensionId + \" response fields!\", function () {",
									"                pm.expect(responseBody[extensionId]).to.be.an('object');",
									"",
									"                var extension = responseBody[extensionId];",
									"",
									"                // Validate specific properties",
									"                pm.expect(extension).to.have.property('name').that.eql('NewNameExt4');",
									"                pm.expect(extension).to.have.property('email').that.eql('sinisabicom1@gmail.com');",
									"                pm.expect(extension).to.have.property('ext').that.eql('915');",
									"                pm.expect(extension).to.have.property('pin').that.eql('9876');",
									"                pm.expect(extension).to.have.property('service_plan').that.eql('0');",
									"                pm.expect(extension).to.have.property('prot').that.eql('sip');",
									"                pm.expect(extension).to.have.property('protocol').that.eql('sip');",
									"                pm.expect(extension).to.have.property('location').that.eql('1');",
									"                pm.expect(extension).to.have.property('user_language').that.eql('');",
									"                pm.expect(extension).to.have.property('ua_id').that.eql('127');",
									"                pm.expect(extension).to.have.property('ua_name').that.eql('glocom');",
									"                pm.expect(extension).to.have.property('ua_fullname').that.eql('gloCOM');",
									"                pm.expect(extension).to.have.property('status').that.eql('2');",
									"                pm.expect(extension).to.have.property('linenum').that.eql('');",
									"                pm.expect(extension).to.have.property('smuser').that.eql('0');",
									"                pm.expect(extension).to.have.property('additional_macaddress').that.eql('');",
									"                pm.expect(extension).to.have.property('options_raw').that.eql('');",
									"                pm.expect(extension).to.have.property('ua_autoprov').that.eql('');",
									"                pm.expect(extension).to.have.property('additional_config').that.eql('');",
									"",
									"                // Validate options object",
									"                pm.expect(extension).to.have.property('options').that.is.an('object');",
									"",
									"                var options = extension.options;",
									"",
									"                pm.expect(options).to.have.property('user_title').that.eql('TestExtension');",
									"                pm.expect(options).to.have.property('ua').that.eql('127');",
									"                pm.expect(options).to.have.property('uloc').that.eql('1');",
									"                pm.expect(options).to.have.property('uad_sipheaders').that.eql('SomeText');",
									"                pm.expect(options).to.have.property('user_label').that.eql('NewLabel');",
									"                pm.expect(options).to.have.property('user_location').that.eql('Cloud');",
									"                pm.expect(options).to.have.property('user_language').that.eql('English');",
									"                pm.expect(options).to.have.property('type').that.eql('friend');",
									"                pm.expect(options).to.have.property('dtmfmode').that.eql('inband');",
									"                pm.expect(options).to.have.property('context').that.eql('t-900');",
									"                pm.expect(options).to.have.property('show_in_app').that.eql('1');",
									"                pm.expect(options).to.have.property('disable_fax_for_glocom').that.eql('1');",
									"                pm.expect(options).to.have.property('app_default_client_phone').that.eql('softphone');",
									"                pm.expect(options).to.have.property('webrtc').that.eql('1');",
									"                pm.expect(options).to.have.property('encryption').that.eql('yes');",
									"                pm.expect(options).to.have.property('nat').that.eql('2');",
									"                pm.expect(options).to.have.property('canreinvite').that.eql('1');",
									"                pm.expect(options).to.have.property('directrtpsetup').that.eql('1');",
									"                pm.expect(options).to.have.property('qualify').that.eql('5000');",
									"                pm.expect(options).to.have.property('host').that.eql('dynamic');",
									"                pm.expect(options).to.have.property('defaultip').that.eql('163.20.227.168');",
									"                pm.expect(options).to.have.property('max_contacts').that.eql('10');",
									"                //pm.expect(options).to.have.property('user_created').that.eql('2024-04-23 04:17:50');",
									"                pm.expect(options).to.have.property('rating_info_osc').that.eql('1');",
									"                pm.expect(options).to.have.property('callerid').that.eql('NewNameExt4 <915>');",
									"                pm.expect(options).to.have.property('callingpres').that.eql('allowed_failed_screen');",
									"                pm.expect(options).to.have.property('cid_anon').that.eql('1');",
									"                pm.expect(options).to.have.property('ringtoneforlocalcalls').that.eql('Ringtone1');",
									"                pm.expect(options).to.have.property('ringtonefortransferredcalls').that.eql('Ringtone2');",
									"                pm.expect(options).to.have.property('cidmatchdid').that.eql('1');",
									"                pm.expect(options).to.have.property('dropanonymous').that.eql('0');",
									"                pm.expect(options).to.have.property('trustrpid').that.eql('1');",
									"                pm.expect(options).to.have.property('sendrpid').that.eql('pai');",
									"                pm.expect(options).to.have.property('trust_id_outbound').that.eql('1');",
									"                pm.expect(options).to.have.property('rpid_connectedline').that.eql('0');",
									"                pm.expect(options).to.have.property('rpid_update').that.eql('1');",
									"                pm.expect(options).to.have.property('pai_var').that.eql('Header1');",
									"                pm.expect(options).to.have.property('voicemail').that.eql('1');",
									"                pm.expect(options).to.have.property('busyvoicemail').that.eql('1');",
									"                pm.expect(options).to.have.property('mailboxes').that.eql('902,903');",
									"                pm.expect(options).to.have.property('callgroup').that.eql('3');",
									"                pm.expect(options).to.have.property('pickupgroup').that.eql('1,2,3');",
									"                pm.expect(options).to.have.property('incominglimit').that.eql('10');",
									"                pm.expect(options).to.have.property('outgoinglimit').that.eql('5');",
									"                pm.expect(options).to.have.property('busylevel').that.eql('12');",
									"                pm.expect(options).to.have.property('username').that.eql('900915');",
									"                pm.expect(options).to.have.property('authname').that.eql('admin');",
									"                pm.expect(options).to.have.property('__auth').that.eql('admin@admin.com');",
									"                pm.expect(options).to.have.property('secret').that.eql('NewPassword1234!-_!%*');",
									"                pm.expect(options).to.have.property('tfa_expiry_time').that.eql('0');",
									"                pm.expect(options).to.have.property('tfa_max_inactivity').that.eql('0');",
									"                pm.expect(options).to.have.property('allow').that.eql(['gsm', 'alaw', 'h261']);",
									"                pm.expect(options).to.have.property('videosupport').that.eql('1');",
									"                pm.expect(options).to.have.property('force_codec').that.eql('opus');",
									"                pm.expect(options).to.have.property('autoframing').that.eql('1');",
									"                pm.expect(options).to.have.property('jbimpl').that.eql('fixed');",
									"                pm.expect(options).to.have.property('jbmaxsize').that.eql('30');",
									"                pm.expect(options).to.have.property('jbresyncthreshold').that.eql('15');",
									"                pm.expect(options).to.have.property('jbtargetextra').that.eql('1234');",
									"                pm.expect(options).to.have.property('recordcalls').that.eql('1');",
									"                pm.expect(options).to.have.property('recordsilent').that.eql('1');",
									"                pm.expect(options).to.have.property('record_beep_ext').that.eql('20');",
									"                pm.expect(options).to.have.property('mac').that.eql('fc5c84414a6f');",
									"                pm.expect(options).to.have.property('dhcp').that.eql('0');",
									"                pm.expect(options).to.have.property('staticip').that.eql('123.123.123.123');",
									"                pm.expect(options).to.have.property('netmask').that.eql('255.255.0.0');",
									"                pm.expect(options).to.have.property('gateway').that.eql('123.123.123.1');",
									"                pm.expect(options).to.have.property('dns1').that.eql('8.8.8.8');",
									"                pm.expect(options).to.have.property('dns2').that.eql('123.123.123.2');",
									"                pm.expect(options).to.have.property('areacode').that.eql('789');",
									"                pm.expect(options).to.have.property('ringtime').that.eql('20');",
									"                pm.expect(options).to.have.property('incoming_dialoptions').that.eql('Tr');",
									"                pm.expect(options).to.have.property('dialoptions').that.eql('t');",
									"                pm.expect(options).to.have.property('page_header_custom').that.eql('Text123');",
									"                pm.expect(options).to.have.property('override_lcr').that.eql('1');",
									"                pm.expect(options).to.have.property('limit_notify_play_sound').that.eql('1');",
									"                pm.expect(options).to.have.property('limit_notify_send_email').that.eql('1');",
									"                pm.expect(options).to.have.property('hd_logout_time').that.eql('1');",
									"                pm.expect(options).to.have.property('pin_based_dialling_pin').that.eql('98765');",
									"                pm.expect(options).to.have.property('disable_fax_for_app').that.eql('1');",
									"                pm.expect(options).to.have.property('disable_my_dialer').that.eql('0');",
									"                pm.expect(options).to.have.property('vmailsend').that.eql('1');",
									"                pm.expect(options).to.have.property('vmailattach').that.eql('1');",
									"                pm.expect(options).to.have.property('vmaildelete').that.eql('1');",
									"                pm.expect(options).to.have.property('voice_tz').that.eql('Bosnia and Herzegovina');",
									"                pm.expect(options).to.have.property('vm_greeting_message').that.eql('1');",
									"                pm.expect(options).to.have.property('autoprovisiong').that.eql('1');",
									"                pm.expect(options).to.have.property('setcallerid').that.eql('0');",
									"            });",
									"        });",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.configuration&server={{TenantID}}&ext=915",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.configuration"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID4}}",
									"description": "Extension ID of which we want to get configuration.",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "915",
									"description": "Note: You cannot supply id and ext at the same time!"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "132:Ext Credit/Debit Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate success response",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"    // Print the success message",
									"    console.log(\"Success: \" + responseBody.success);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.balance&server={{TenantID}}&id={{ExtID1}}&mode=credit&amount=10000&notes=Dopuna&refno=123456789",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.balance"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or server ID"
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "Extension ID, or list of IDs from CSV file"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								},
								{
									"key": "mode",
									"value": "credit",
									"description": "Either \"credit\" or \"debit\""
								},
								{
									"key": "amount",
									"value": "10000",
									"description": "Amount to credit/debit onto balance (Regex: /^([0-9]+|[0-9]+\\\\.[0-9]+)$/)"
								},
								{
									"key": "notes",
									"value": "Dopuna",
									"description": "Notes in regards to this update. (Regex: /^.+$/)"
								},
								{
									"key": "refno",
									"value": "123456789",
									"description": "Reference Number (Regex: /^.+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "133:Ext Call Rating",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"           // Validate specific properties for each extension",
									"pm.test('Extension ' + extensionID + ' Data Validation', function () {",
									"    pm.expect(extensionData).to.have.property('splan').that.is.a('string');",
									"    pm.expect(extensionData).to.have.property('slave').that.is.oneOf(['yes', 'no']);",
									"    ",
									"    // Validate master_code: can be null or a number",
									"    pm.expect(extensionData.master_code).to.satisfy((value) => value === null || !isNaN(value));",
									"    ",
									"    // Validate properties after master_code: can be null or specific data types",
									"    pm.expect(extensionData).to.have.property('reminder_balance').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('credit_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('splan_date').that.satisfies(value => value === null || /^\\d{2}-\\d{2}-\\d{4}$/.test(value));",
									"    pm.expect(extensionData).to.have.property('limits').that.satisfies(value => value === null || ['yes', 'no'].includes(value));",
									"    pm.expect(extensionData).to.have.property('limit_type').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('soft_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('hard_limit').that.satisfies(value => value === null || typeof value === 'string');",
									"    pm.expect(extensionData).to.have.property('email').that.satisfies(value => value === null || typeof value === 'string');",
									"    ",
									"});",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating&server={{TenantID}}&id={{ExtID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating",
									"description": "Extension Billing"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "134:Ext Call Rating Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Loop through extension billing info data",
									"        for (var extensionID in responseBody) {",
									"            var extensionData = responseBody[extensionID];",
									"            ",
									"            // Validate specific properties for each extension",
									"            pm.test('Extension ' + extensionID + ' Billing Info Validation', function () {",
									"                pm.expect(extensionData).to.have.property('account_balance').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('available_funds').that.is.a('string');",
									"                pm.expect(extensionData).to.have.property('inclusive_minutes').that.is.a('string');",
									"                ",
									"                // Print the result for each extension",
									"                console.log('Extension ID:', extensionID);",
									"                console.log('Account Balance:', extensionData.account_balance);",
									"                console.log('Available Funds:', extensionData.available_funds);",
									"                console.log('Inclusive Minutes:', extensionData.inclusive_minutes);",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_info&server={{TenantID}}&id={{ExtID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_info",
									"description": "Extension Billing Info."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "Extension IDs (Use CSV file for geting info from more Extensions)"
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "135:Ext Call Rating History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the 'sum' parameter is present in the URL variables",
									"    var sumParam = pm.request.url.query.get('sum');",
									"    if (sumParam === '1') {",
									"        // This is the case where 'sum' parameter is 1",
									"        pm.test('Response Validation for Sum=1', function () {",
									"            pm.expect(responseBody).to.be.an('array');",
									"            ",
									"            // Loop through the response entries",
									"            for (var entry of responseBody) {",
									"                pm.test('Entry Validation', function () {",
									"                    pm.expect(entry).to.have.property('sum_credit').that.is.a('string');",
									"                    pm.expect(entry).to.have.property('sum_debit').that.is.a('string');",
									"                    ",
									"                    // Print the result for each entry",
									"                    console.log('Sum Credit:', entry.sum_credit);",
									"                    console.log('Sum Debit:', entry.sum_debit);",
									"                });",
									"            }",
									"        });",
									"    } else {",
									"        // This is the case where 'sum' parameter is not provided or is 0",
									"        pm.test('Response Validation for Sum=0 or Not Specified', function () {",
									"            if (Array.isArray(responseBody)) {",
									"                // Check if the array is empty",
									"                if (responseBody.length === 0) {",
									"                    console.log(\"You entered data that does not give any results. Please recheck the data you enter and try with different inputs.\");",
									"                } else {",
									"                    // Loop through billing history entries",
									"                    for (var entry of responseBody) {",
									"                        pm.test('Billing History Entry Validation', function () {",
									"                            pm.expect(entry).to.have.property('entry_date').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('refno').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('notes').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('amount').that.is.a('string');",
									"                            pm.expect(entry).to.have.property('type').that.is.a('string');",
									"                            ",
									"                            // Print the result for each billing history entry",
									"                            console.log('Entry Date:', entry.entry_date);",
									"                            console.log('Ref No:', entry.refno);",
									"                            console.log('Notes:', entry.notes);",
									"                            console.log('Amount:', entry.amount);",
									"                            console.log('Type:', entry.type);",
									"                        });",
									"                    }",
									"                }",
									"            } else {",
									"                // Handle other unexpected response structures",
									"                console.log(\"Response structure is not as expected. Please review the response data.\");",
									"            }",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.call_rating_history&server={{TenantID}}&id={{ExtID1}}&start=Jan-01-2023&end=Dec-30-2030",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.call_rating_history"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "ID of Server or Tenant."
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "ID of extension we want to get info (or for list of IDs use CSV file)"
								},
								{
									"key": "start",
									"value": "Jan-01-2023",
									"description": "Start Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "end",
									"value": "Dec-30-2030",
									"description": "End Date (Required) - Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "starttime",
									"value": "{{StartTime}}",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "endtime",
									"value": "{{EndTime}}",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59) Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "type",
									"value": "",
									"description": "Type (eg: credit|debit)",
									"disabled": true
								},
								{
									"key": "refno",
									"value": "",
									"description": "Reference Number",
									"disabled": true
								},
								{
									"key": "rrefno",
									"value": "",
									"description": "Filtering Reference Number using regular expressions",
									"disabled": true
								},
								{
									"key": "sum",
									"value": "",
									"description": "Summarize amount by type (Yes=1, No=0)",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching history. (Ex: \"America/New_York\")",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "136:Ext Reset Inclusive Minutes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.reset_inclusive_minutes&server={{TenantID}}&id={{ExtID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.reset_inclusive_minutes",
									"description": "Reset Inclusive Minutes"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "Extension ID. Use CSV files for list of extensions."
								},
								{
									"key": "ext",
									"value": "{{extension}}",
									"description": "Extension number. Note: You cannot supply id and ext at the same time!",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "137:Voicemail Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.voicemail.delete&server={{TenantID}}&ext={{ExtNumber1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.voicemail.delete",
									"description": "Delete extensions voicemail."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "ext",
									"value": "{{ExtNumber1}}",
									"description": "Extension number (Required)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enhanced Services",
			"item": [
				{
					"name": "Caller ID",
					"item": [
						{
							"name": "138:Caller ID set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "139:Caller ID get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "140:Caller ID set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.set_osc&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "141:Caller ID get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "142:Caller ID Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the \"success\" field",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody.success).to.include('Caller ID: ');",
											"    });",
											"",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.edit&server={{TenantID}}&id={{ExtID1}}&callerid=TestCID&emergencycid=EmerCID",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.edit"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "callerid",
											"value": "TestCID",
											"description": "Specify caller ID to be set. (Required)"
										},
										{
											"key": "emergencycid",
											"value": "EmerCID",
											"description": "Emergency CallerID."
										},
										{
											"key": "anums",
											"value": "",
											"description": "Allowed list of CallerIDs. (Regex: /^(:|(([\\\\+]?[\\\\d\\\\s])+))+$/)",
											"disabled": true
										},
										{
											"key": "alabels",
											"value": "",
											"description": "Labels for Allowed list of CallerIDs. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
											"disabled": true
										},
										{
											"key": "acodes",
											"value": "",
											"description": "Short Codes for Allowed list of CallerIDs. (Regex: /^(([\\\\d]?(:([\\\\d])?)+)|[\\\\d])$/)",
											"disabled": true
										},
										{
											"key": "trunks",
											"value": "",
											"description": "Specify list of trunk names separated by colon :. (Regex: /^(:|[a-zA-Z0-9_.-]+)+$/)",
											"disabled": true
										},
										{
											"key": "tcallerids",
											"value": "",
											"description": "Specify list of caller ids for specified trunks.. (Regex: /^(:|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)",
											"disabled": true
										},
										{
											"key": "tprivacies",
											"value": "",
											"description": "Specify list of privacies separated by colon : (0 ⇒ anonymous, 1 ⇒ anonymous_id, 2 ⇒ anonymous_number, 3 ⇒ anonymous_number_id, 4 ⇒ none).",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "143:Caller ID configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"",
											"        // Validate the \"callerid\" field",
											"        pm.test('CallerID Field Validation', function () {",
											"            pm.expect(responseBody).to.have.property('callerid').that.is.a('string');",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call Filters & Blocking",
					"item": [
						{
							"name": "144:Call Filters & Blocking set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfilters.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "145:Call Filters & Blocking get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfilters.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "146:Call Filters & Blocking set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfilters.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "147:Call Filters & Blocking get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callerid.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callerid.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "148:Call Filters & Blocking Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the \"success\" and \"callfilters\" fields",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody.success).to.equal('Call Filters & Blocking.'); // Adjust expected value if needed",
											"    });",
											"",
											"    pm.test('Call Filters Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('callfilters').that.is.a('string');",
											"        pm.expect(responseBody.callfilters).to.equal('OK'); // Adjust expected value if needed",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.edit&server={{TenantID}}&id={{ExtID1}}&callers=anonymous,&dtypes=not in service,&destinations=0,&telemarketer=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfilters.edit",
											"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "callers",
											"value": "anonymous,",
											"description": "List of caller numbers separated with comma ,. This list must start with anonymous value for anonymous callers. (Required) "
										},
										{
											"key": "dtypes",
											"value": "not in service,",
											"description": "Destination types list separated with comma ,. Following values are possible: call forward number|no answer|busy|voicemail|not in service (Required)"
										},
										{
											"key": "destinations",
											"value": "0,",
											"description": "List of destinations separated with comma ,. (numbers only) (Required)"
										},
										{
											"key": "telemarketer",
											"value": "1",
											"description": "Telemarketer block yes or no (1 or 0)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "149:Call Filters & Blocking configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the \"callers,\" \"dtypes,\" and \"destinations\" fields",
											"    pm.test('Callers Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('callers').that.is.an('array');",
											"        responseBody.callers.forEach(function (caller) {",
											"            pm.expect(caller).to.be.a('string');",
											"        });",
											"    });",
											"",
											"    pm.test('Dtypes Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('dtypes').that.is.an('array');",
											"        responseBody.dtypes.forEach(function (dtype) {",
											"            pm.expect(dtype).to.be.a('string');",
											"        });",
											"    });",
											"",
											"    pm.test('Destinations Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
											"        responseBody.destinations.forEach(function (destination) {",
											"            pm.expect(destination).to.be.a('string');",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfilters.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfilters.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call Screening",
					"item": [
						{
							"name": "150:Call Screening set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callscreening.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "151:Call Screening get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callscreening.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "152:Call Screening set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callscreening.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "153:Call Screening get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callscreening.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callscreening.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Do Not Disturbe",
					"item": [
						{
							"name": "154:Do Not Disturb set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "155:Do Not Disturb get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "156:Do Not Disturb set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "157:Do Not Disturb get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "158:Do Not Disturb Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if success is a string",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"        ",
											"        // Check if dnd is a string",
											"        pm.expect(responseBody.dnd).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.edit&server={{TenantID}}&id={{ExtID1}}&dnd=2&dst=425&dsttype=voicemail&duration=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.edit",
											"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "dnd",
											"value": "2",
											"description": "Set dnd temporary or not active (0, 1 or 2 for Not Active, Temporary and Permanent). (Regex: /^(0|1|2)$/)"
										},
										{
											"key": "dst",
											"value": "425",
											"description": "Destination value (numbers only). (Regex: /^\\\\d+$/)"
										},
										{
											"key": "dsttype",
											"value": "voicemail",
											"description": "Destination type voicemail or call forward. (Regex: /^(voicemail|call forward)$/)"
										},
										{
											"key": "duration",
											"value": "1",
											"description": "Duration in hours (numbers only)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "159:Do Not Disturb configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if dnd is a number",
											"        pm.expect(responseBody.dnd).to.be.a('string');",
											"        ",
											"        // Check if dst is a string",
											"        pm.expect(responseBody.dst).to.be.a('string');",
											"        ",
											"        // Check if dsttype is a string",
											"        pm.expect(responseBody.dsttype).to.be.a('string');",
											"        ",
											"        // Check if duration is either null or a number",
											"        pm.expect(responseBody.duration).to.satisfy(function (value) {",
											"            return value === null || typeof value === 'string';",
											"        });",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.dnd.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.dnd.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call Pickup",
					"item": [
						{
							"name": "160:Call Pickup set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set&server={{TenantID}}&id={{ExtID1}}&state=pin",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callpickup.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "pin",
											"description": "Argument state can have one of these: yes, no or pin."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "161:Call Pickup get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callpickup.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "162:Call Pickup set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callpickup.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "163:Call Pickup get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callpickup.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callpickup.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Last Caller",
					"item": [
						{
							"name": "164:Last Caller set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set&server={{TenantID}}&id={{ExtID1}}&state=pin",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.lastcaller.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "pin",
											"description": "Argument state can have one of these: yes, no or pin."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "165:Last Caller get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.lastcaller.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "166:Last Caller set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.lastcaller.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "167:Last Caller get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.lastcaller.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.lastcaller.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call Forwarding",
					"item": [
						{
							"name": "168:Call Forwarding set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set&server={{TenantID}}&id={{ExtID1}}&state=pin",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "pin",
											"description": "Argument state can have one of these: yes, no or pin"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "169:Call Forwarding get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "170:Call Forwarding set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "171:Call Forwarding get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "172:Call Forwarding Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if success is a string",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"        ",
											"        // Check if callfwd is a string",
											"        pm.expect(responseBody.callfwd).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.edit&server={{TenantID}}&id={{ExtID1}}&enabled=unconditional,busy,&uncond_dests=902&busy_dests=903&uncond_timeouts=15&busy_timeouts=15&play=0&cid=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.edit",
											"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "enabled",
											"value": "unconditional,busy,",
											"description": "Comma , separated list of enabled call forward conditions, Following values are accepted: unconditional|busy|no answer|line unavailable. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "uncond_dests",
											"value": "902",
											"description": "Comma , separated list of unconditional destinations. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "busy_dests",
											"value": "903",
											"description": "Comma , separated list of busy destinations. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "noansw_dests",
											"value": "423",
											"description": "Comma , separated list of no answer destinations. (Regex: /^(,|\\\\d+)+$/)",
											"disabled": true
										},
										{
											"key": "unavail_dests",
											"value": "903",
											"description": "Comma , separated list of unavailable destinations. (Regex: /^(,|\\\\d+)+$/)",
											"disabled": true
										},
										{
											"key": "uncond_timeouts",
											"value": "15",
											"description": "Comma , separated list of unconditional timeouts. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "busy_timeouts",
											"value": "15",
											"description": "Comma , separated list of busy timeouts. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "noansw_timeouts",
											"value": "15",
											"description": "Comma , separated list of no answer timeouts. (Regex: /^(,|\\\\d+)+$/)",
											"disabled": true
										},
										{
											"key": "unavail_timeouts",
											"value": "20",
											"description": "Comma , separated list of unavailable timeouts. (Regex: /^(,|\\\\d+)+$/)",
											"disabled": true
										},
										{
											"key": "play",
											"value": "0",
											"description": "Play enable disable 1 or 0. (Regex: /^(0|1)$/)"
										},
										{
											"key": "cid",
											"value": "1",
											"description": "Caller ID enable disable 1 or 0. (Regex: /^(0|1)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "173:Call Forwarding configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if enabled is present",
											"        pm.expect(responseBody).to.have.property('enabled');",
											"        ",
											"        // Check if destinations is present",
											"        pm.expect(responseBody).to.have.property('destinations');",
											"        ",
											"        // Check if timeouts is present",
											"        pm.expect(responseBody).to.have.property('timeouts');",
											"        ",
											"        // Check if play is present",
											"        pm.expect(responseBody).to.have.property('play');",
											"        ",
											"        // Check if cid is present",
											"        pm.expect(responseBody).to.have.property('cid');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callfwd.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callfwd.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Follow Me",
					"item": [
						{
							"name": "174:Follow Me set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes, no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "175:Follow Me get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "176:Follow Me set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "177:Follow Me get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "178:Follow Me Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if success is a string",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"        ",
											"        // Check if followme is a string",
											"        pm.expect(responseBody.followme).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.edit&server={{TenantID}}&id={{ExtID1}}&destinations=902,&timeouts=10,&dopts=Tr&lastd=903&voicemail=1&confirm_calls=0",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.edit",
											"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "destinations",
											"value": "902,",
											"description": "Comma separated , list of destinations (Required). Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "timeouts",
											"value": "10,",
											"description": "Comma separated , list of timeouts (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "dopts",
											"value": "Tr",
											"description": "Dial options (trT). (Regex: /^[tTr]+$/)"
										},
										{
											"key": "lastd",
											"value": "903",
											"description": "Last destination. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "voicemail",
											"value": "1",
											"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
										},
										{
											"key": "confirm_calls",
											"value": "0",
											"description": "Voicemail yes or no (1 or 0). (Regex: /^(0|1)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "179:Follow Me configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if destinations is an array",
											"        pm.expect(responseBody.destinations).to.be.an('array');",
											"        // Check if timeouts is an array",
											"        pm.expect(responseBody.timeouts).to.be.an('array');",
											"        // Check if dopts is a string",
											"        pm.expect(responseBody.dopts).to.be.a('string');",
											"        // Check if lastd is a string",
											"        pm.expect(responseBody.lastd).to.be.a('string');",
											"        // Check if voicemail is a string",
											"        pm.expect(responseBody.voicemail).to.be.a('string');",
											"        // Check if confirm_calls is a string",
											"        pm.expect(responseBody.confirm_calls).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.followme.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.followme.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Instant Recording",
					"item": [
						{
							"name": "180:Instant Recording set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes, no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "181:Instant Recording get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "182:Instant Recording set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "183:Instant Recording get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "184:Instant Recording Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if success is a string",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"        // Check if instrecord is a string",
											"        pm.expect(responseBody.instrecord).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.edit&server={{TenantID}}&id={{ExtID1}}&silent=0&emailrec=0",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.edit",
											"description": "`callers`, `dtypes` and `destinations` lists must be same size or error will be returned, cause they define list of records required."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "silent",
											"value": "0",
											"description": "Silent (0,1) (Required). (Regex: /^(0|1)$/)"
										},
										{
											"key": "emailrec",
											"value": "0",
											"description": "E-mail recording (0,1) (Required). (Regex: /^(0|1)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "185:Instant Recording configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if silent is a string",
											"        pm.expect(responseBody.silent).to.be.a('string');",
											"        // Check if emailrec is a string",
											"        pm.expect(responseBody.emailrec).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.instrecord.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.instrecord.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Remote Access",
					"item": [
						{
							"name": "186:Remote Access set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "187:Remote Access get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "188:Remote Access set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "189:Remote Access get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "190:Remote Access Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('remoteaccess').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.edit&server={{TenantID}}&id={{ExtID1}}&callerids=123456,&pins=0,&requirepin=1&timeout=123&dopts=t",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.edit",
											"description": "Fields callerids names and pins not correspond to each other."
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "callerids",
											"value": "123456,",
											"description": "Comma separated , list of Caller ID’s (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "pins",
											"value": "0,",
											"description": "Comma separated , list of PIN’s - yes or no 1 or 0 (Required). (Regex: /^(,|0|1)+$/)"
										},
										{
											"key": "requirepin",
											"value": "1",
											"description": "Require Extension PIN 1 or 0 (Required). (Regex: /^(0|1)$/)"
										},
										{
											"key": "timeout",
											"value": "123",
											"description": "Timeout in seconds (Optional). (Regex: /^\\\\d+$/)"
										},
										{
											"key": "dopts",
											"value": "t",
											"description": "Dial options (tTr) (Optional). (Regex: /^[tTr]+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "191:Remote Access configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.be.an('object');",
											"        pm.expect(responseBody).to.have.property('callerids').that.is.an('array');",
											"        pm.expect(responseBody).to.have.property('pins').that.is.an('array');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.remoteaccess.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.remoteaccess.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Phone Callback",
					"item": [
						{
							"name": "192:Phone Callback set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.phonecallback.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes, no or pin."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "193:Phone Callback get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.phonecallback.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "194:Phone Callback set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.phonecallback.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "195:Phone Callback get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.phonecallback.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.phonecallback.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Group Hunt",
					"item": [
						{
							"name": "196:Group Hunt set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "197:Group Hunt get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "198:Group Hunt set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "199:Group Hunt get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200:Group Hunt Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('grouphunt').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.edit&server={{TenantID}}&id={{ExtID1}}&destinations=901&delays=10&suspends=1&timeout=20&dopts=t&lastd=425&voicemail=1&confirmcalls=0",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.edit",
											"description": "Fields destinations, delays and suspends lists must match in size"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "destinations",
											"value": "901",
											"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "delays",
											"value": "10",
											"description": "Comma separated , list of delays (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "suspends",
											"value": "1",
											"description": "Comma separated , list of suspends (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "timeout",
											"value": "20",
											"description": "Timeout in seconds. (Regex: /^\\\\d+$/)."
										},
										{
											"key": "dopts",
											"value": "t",
											"description": "Dial options (tTr). (Regex: /^[tTr]+$/)"
										},
										{
											"key": "lastd",
											"value": "425",
											"description": "Last destination. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "voicemail",
											"value": "1",
											"description": "Voicemail 1 or 0"
										},
										{
											"key": "confirmcalls",
											"value": "0",
											"description": "Confirm calls 1 or 0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "201:Group Hunt configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
											"        pm.expect(responseBody).to.have.property('delays').that.is.an('array');",
											"        pm.expect(responseBody).to.have.property('suspends').that.satisfy(function(value) {",
											"            return Array.isArray(value) || typeof value === 'string';",
											"        });",
											"        pm.expect(responseBody).to.have.property('dopts').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('lastd').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('timeout').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('voicemail').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('confirmcalls').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.grouphunt.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.grouphunt.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mobile Numbers",
					"item": [
						{
							"name": "202:Mobile Numbers set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "203:Mobile Numbers get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "204:Mobile Numbers set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "205:Mobile Numbers get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "206:Mobile Numbers Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('mobilenumbers').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.edit&server={{TenantID}}&id={{ExtID1}}&mobiles=21312312443345,12312323123&labels=Test,Test2",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.edit",
											"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "mobiles",
											"value": "21312312443345,12312323123",
											"description": "Comma separated , list of mobile numbers (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "labels",
											"value": "Test,Test2",
											"description": "Comma separated , list of labels (Required). (Regex: /^(,|([\\\\+\\\\w\\\\s]+(\\\\s*<[\\\\+\\\\d]+>)?))+$/)."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "207:Mobile Numbers configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        // Check if the response is an array or an object",
											"        pm.expect(responseBody).to.satisfy(function (body) {",
											"            return Array.isArray(body) || (typeof body === 'object' && 'mobiles' in body && 'labels' in body);",
											"        }, 'Response body should be an array or an object with \"mobiles\" and \"labels\" fields.');",
											"",
											"        // If the response is an object, check specific fields",
											"        if (typeof responseBody === 'object' && 'mobiles' in responseBody && 'labels' in responseBody) {",
											"            pm.expect(responseBody.mobiles).to.be.an('array'); // Check if numbers is an array",
											"            pm.expect(responseBody.labels).to.be.an('array'); // Check if labels is an array",
											"            // Add more property checks as needed",
											"        }",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.mobilenumbers.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.mobilenumbers.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Speakerphone Page",
					"item": [
						{
							"name": "208:Speakerphone Page set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set&server={{TenantID}}&id={{ExtID1}}&state=pin",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "pin",
											"description": "Argument state can have one of these: yes, no or pin."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "209:Speakerphone Page get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "210:Speakerphone Page set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "211:Speakerphone Page get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "212:Speakerphone Page Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('sppage').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.edit&server={{TenantID}}&id={{ExtID1}}&extensions=422,423&quiet=0",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.edit",
											"description": "\"Fields mobiles, labels and suspends lists must match in size.\""
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "extensions",
											"value": "422,423",
											"description": "Comma separated , list of extensions. (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "quiet",
											"value": "0",
											"description": "Quiet mode (1 or 0). (Regex: /^(0|1)$/"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "213:Speakerphone Page configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('extensions').that.is.an('array');",
											"        pm.expect(responseBody.extensions).to.have.length.above(0);",
											"        pm.expect(responseBody).to.have.property('quiet').that.is.a('number');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppage.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppage.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "BLF List",
					"item": [
						{
							"name": "214:BLF List set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.blflist.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "215:BLF List get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.blflist.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "216:BLF List set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.blflist.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "217:BLF List get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.blflist.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.blflist.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Speed Dial",
					"item": [
						{
							"name": "218:Speed Dial set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "219:Speed Dial get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "220:Speed Dial set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "221:Speed Dial get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "222:Speed Dial Edit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
											"        pm.expect(responseBody).to.have.property('speeddial').that.is.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.edit&server={{TenantID}}&id={{ExtID1}}&codes=1&names=ExtNumber&destinations=38735450451",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.edit",
											"description": "Fields destinations, delays and suspends lists must match in size"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "codes",
											"value": "1",
											"description": "Comma separated , list of codes (Required). (Regex: /^(,|\\\\d+)+$/)"
										},
										{
											"key": "names",
											"value": "ExtNumber",
											"description": "Comma separated , list of names (Required). (Regex: /^(,|[\\\\w\\\\s]+)+$/)"
										},
										{
											"key": "destinations",
											"value": "38735450451",
											"description": "Comma separated , list of destinations (Required). (Regex: /^(,|\\\\d+)+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "223:Speed Dial configuration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Validate the response structure",
											"    pm.test('Response Validation', function () {",
											"        pm.expect(responseBody).to.have.property('codes').that.is.an('array');",
											"        pm.expect(responseBody).to.have.property('names').that.is.an('array');",
											"        pm.expect(responseBody).to.have.property('destinations').that.is.an('array');",
											"",
											"        // Assuming all arrays have the same length",
											"        var arrayLength = responseBody.codes.length;",
											"",
											"        // Iterate through each item in the arrays",
											"        for (var i = 0; i < arrayLength; i++) {",
											"            pm.test(`Speed Dial Configuration ${i + 1}`, function () {",
											"                pm.expect(responseBody.codes[i]).to.be.a('string');",
											"                pm.expect(responseBody.names[i]).to.be.a('string');",
											"                pm.expect(responseBody.destinations[i]).to.be.a('string');",
											"            });",
											"        }",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.speeddial.configuration&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.speeddial.configuration"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Recordings",
					"item": [
						{
							"name": "224:Delete Recordings set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.delrecordings.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "225:Delete Recordings get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.delrecordings.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "226:Delete Recordings set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.delrecordings.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "227:Delete Recordings get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.delrecordings.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.delrecordings.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Listen to Recordings",
					"item": [
						{
							"name": "228:Listen to Recordings set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.listenrecordings.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "229:Listen to Recordings get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.listenrecordings.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "230:Listen to Recordings set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.listenrecordings.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "231:Listen to Recordings get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.listenrecordings.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.listenrecordings.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "System Operation Times",
					"item": [
						{
							"name": "232:System Operation Times set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.operationtimes.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "233:System Operation Times get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.operationtimes.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "234:System Operation Times set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.operationtimes.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "235:System Operation Times get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.operationtimes.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.operationtimes.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Extension Operation Times",
					"item": [
						{
							"name": "236:Extension Operation Times set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.extoperationtimes.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "237:Extension Operation Times get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.extoperationtimes.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "238:Extension Operation Times set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.extoperationtimes.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "239:Extension Operation Times get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.extoperationtimes.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.extoperationtimes.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Call Monitoring",
					"item": [
						{
							"name": "240:Call Monitoring set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callmonitoring.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "241:Call Monitoring get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callmonitoring.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "242:Call Monitoring set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callmonitoring.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "243:Call Monitoring get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.callmonitoring.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.callmonitoring.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Wake-up Call",
					"item": [
						{
							"name": "244:Wake-up Call set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.wakeupcall.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "245:Wake-up Call get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.wakeupcall.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "246:Wake-up Call set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.wakeupcall.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "247:Wake-up Call get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.wakeupcall.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.wakeupcall.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Operator Wake-up Call",
					"item": [
						{
							"name": "248:Operator Wake-up Call set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.opwakeupcall.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes or no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "249:Operator Wake-up Call get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.opwakeupcall.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "250:Operator Wake-up Call set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.opwakeupcall.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "251:Operator Wake-up Call get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.opwakeupcall.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.opwakeupcall.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Speakerphone Page Groups",
					"item": [
						{
							"name": "252:Speakerphone Page Groups set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppagegroups.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes, no or pin."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "253:Speakerphone Page Groups get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppagegroups.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "254:Speakerphone Page Groups set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppagegroups.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "255:Speakerphone Page Groups get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.sppagegroups.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.sppagegroups.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SMS Notification",
					"item": [
						{
							"name": "256:SMS Notifications set",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set&server={{TenantID}}&id={{ExtID1}}&state=yes",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.smsnotifications.set"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "yes",
											"description": "Argument state can have one of these: yes, no."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "257:SMS Notifications get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no', 'pin']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.smsnotifications.get"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "258:SMS Notifications set OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"        pm.expect(responseBody.state).to.be.a('string');",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"    // Check if \"success\" field exists",
											"    pm.test('Success Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('success');",
											"        pm.expect(responseBody.success).to.be.a('string');",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.set_osc&server={{TenantID}}&id={{ExtID1}}&state=1",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.smsnotifications.set_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID"
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										},
										{
											"key": "state",
											"value": "1",
											"description": "Argument state can have one of these: yes or no. Regex: /^(yes|no|1|0)$/)"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "259:SMS Notifications get OSC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for 200 OK response",
											"pm.test('Status code is 200 OK', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Parse the response JSON",
											"var responseBody = pm.response.json();",
											"",
											"// Check if there is an error field in the response",
											"if ('error' in responseBody) {",
											"    console.error(\"Test Failed: \" + responseBody.error);",
											"    pm.test('API Response Error', function () {",
											"        pm.expect.fail(responseBody.error);",
											"    });",
											"} else {",
											"    // Check if \"state\" field exists",
											"    pm.test('State Field Validation', function () {",
											"        pm.expect(responseBody).to.have.property('state');",
											"",
											"        // Check if \"state\" is one of the valid values",
											"        pm.expect(['yes', 'no']).to.include(responseBody.state);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.es.smsnotifications.get_osc&server={{TenantID}}&id={{ExtID1}}",
									"protocol": "http",
									"host": [
										"{{IP}}"
									],
									"path": [
										"index.php"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{API_Key}}"
										},
										{
											"key": "action",
											"value": "pbxware.ext.es.smsnotifications.get_osc"
										},
										{
											"key": "server",
											"value": "{{TenantID}}",
											"description": "Server/Tenant ID."
										},
										{
											"key": "id",
											"value": "{{ExtID1}}",
											"description": "Extension ID. (Regex: /^\\\\d+$/)"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CLI Routing",
			"item": [
				{
					"name": "260:Adding CLI Routing 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"CLIRoutID1\", responseBody.id);",
									"",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.add&tenant={{TenantID}}&callerid=123456&dest_type=0&destination=902&matchexplicitly=0",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID (Required).If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "123456",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "0",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "902",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "0",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "261:Adding CLI Routing 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"CLIRoutID2\", responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.add&tenant={{TenantID}}&callerid=456789&dest_type=0&destination=902&matchexplicitly=0",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID (Required).If PBXware is not running in Tenant Mode, Tenant ID should be set to 1. (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "456789",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "0",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "902",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "0",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "262:Listing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if \"success\" field is an empty array",
									"if (Array.isArray(responseBody.success) && responseBody.success.length === 0) {",
									"    console.error(\"Test Failed: There is no CLI routing created for selected Tenant!\");",
									"    pm.test('No CLI Routing Found', function () {",
									"        pm.expect.fail(\"There is no CLI routing created for selected Tenant!\");",
									"    });",
									"} else {",
									"",
									"    // Initialize an index variable to keep track of the iteration",
									"    var index = 0;",
									"",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each CLI routing entry",
									"        for (var cliroutingId in responseBody.success) {",
									"            var clirouting = responseBody.success[cliroutingId];",
									"            pm.expect(clirouting).to.be.an('object');",
									"",
									"            pm.test(`CLI Routing ${cliroutingId} Validation`, function () {",
									"                pm.expect(clirouting).to.have.property('callerid').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('ext').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('type').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('matchtype').that.is.a('string');",
									"",
									"                /*",
									"                // If it's the second iteration, save cliroutingId in the collection variable",
									"                if (index === 1) {",
									"                    pm.collectionVariables.set('CLIRoutID', cliroutingId);",
									"                }",
									"",
									"                // Increment the index",
									"                index++;*/",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.list&tenant={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.list"
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "263:Deleting CLI Routing 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"CLIRoutID1\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.delete&tenant={{TenantID}}&cliroutingid={{CLIRoutID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutID1}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "264:Deleting CLI Routing 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"CLIRoutID2\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.clirouting.delete&tenant={{TenantID}}&cliroutingid={{CLIRoutID2}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "tenant",
									"value": "{{TenantID}}",
									"description": "Tenant ID (Required). If PBXware is not running in Tenant Mode, Tenant ID should be set to 1."
								},
								{
									"key": "cliroutingid",
									"value": "{{CLIRoutID2}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DID Group Mode",
			"item": [
				{
					"name": "267:DID mode groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if response is defined",
									"if (responseBody === undefined) {",
									"    console.error(\"Test Failed: Response is undefined\");",
									"    pm.test('Undefined Response', function () {",
									"        pm.expect.fail(\"Response is undefined\");",
									"    });",
									"} else {",
									"    // Check if there is an error field in the response",
									"    if ('error' in responseBody) {",
									"        console.error(\"Test Failed: \" + responseBody.error);",
									"        pm.test('API Response Error', function () {",
									"            pm.expect.fail(responseBody.error);",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.have.property('success', 'Server ID: 1.');",
									"            pm.expect(responseBody).to.have.property('id', '1');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.server.didmode&didmode=groups",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.server.didmode"
								},
								{
									"key": "didmode",
									"value": "groups"
								}
							]
						},
						"description": "API request to change DID mode on MT version of PBXware."
					},
					"response": []
				},
				{
					"name": "268:Adding DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        pm.collectionVariables.set(\"DIDGroupID\", responseBody.id);",
									"        console.log(pm.collectionVariables.get('DIDGroupID'));",
									"    });",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.add&server=1&group_name=GroupDID_API&tenantid={{TenantID}}&min_did=0038735900900&max_did=0038735900905",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.add",
									"description": "For Add few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1. (Required)"
								},
								{
									"key": "group_name",
									"value": "GroupDID_API",
									"description": "DID Group Name (Required). (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "{{TenantID}}",
									"description": "Tenant ID that DID group is mapped to. (Required). (Regex: /^\\d+$/)"
								},
								{
									"key": "min_did",
									"value": "0038735900900",
									"description": "DID Group range start (Required) (Regex: /^\\d+$/)"
								},
								{
									"key": "max_did",
									"value": "0038735900905",
									"description": "DID Group range end (Required) (Regex: /^\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "269:Editing DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('DID Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.edit&server=1&id={{DIDGroupID}}&group_name=API_DIDGr&min_did=0038735900900&max_did=0038735900910",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.edit",
									"description": "For Editing few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								},
								{
									"key": "group_name",
									"value": "API_DIDGr",
									"description": "DID Group Name. (Regex: /^[[:alnum:][:punct:][:space:]]+$/)"
								},
								{
									"key": "tenantid",
									"value": "",
									"description": "Tenant ID that DID group is mapped to. (Regex: /^\\d+$/)",
									"disabled": true
								},
								{
									"key": "min_did",
									"value": "0038735900900",
									"description": "DID Group range start. (Regex: /^\\d+$/)"
								},
								{
									"key": "max_did",
									"value": "0038735900910",
									"description": "DID Group range end. (Regex: /^\\d+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "270:Listing DID groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"There is no DID groups to show!\");",
									"        pm.test('No DID Groups Found', function () {",
									"            pm.expect.fail(\"No DID groups found\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DID group IDs array from the environment",
									"            var didGroupIDs = pm.collectionVariables.get('DIDGroupID') || [];",
									"",
									"            /*",
									"            // Loop through DID group data",
									"            for (var groupID in responseBody) {",
									"                var groupData = responseBody[groupID];",
									"",
									"                // Save the group ID to the DID group IDs array",
									"                didGroupIDs.push(groupID);",
									"",
									"                // Validate specific properties for each DID group",
									"                pm.test('DID Group ' + groupID + ' Data Validation', function () {",
									"                    pm.expect(groupData).to.be.an('object');",
									"                    pm.expect(groupData).to.have.property('group_name').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('max_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('min_did').that.is.a('string');",
									"                    pm.expect(groupData).to.have.property('tenant').that.is.a('string');",
									"",
									"                    // Print the result for each DID group",
									"                    console.log('Group ID:', groupID);",
									"                    console.log('Group Name:', groupData.group_name);",
									"                    console.log('Max DID:', groupData.max_did);",
									"                    console.log('Min DID:', groupData.min_did);",
									"                    console.log('Tenant:', groupData.tenant);",
									"                });",
									"",
									"",
									"                pm.collectionVariables.set(\"DID-IDs\", didGroupIDs);",
									"            }*/",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.list",
									"description": "Listing of DID groups, by default, will include all DID groups."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "271:Add DID 1 from Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"        ",
									"        pm.collectionVariables.set(\"DID_ID_3\", responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.add&server={{TenantID}}&trunk={{TrunkID1}}&dest_type=0&destination={{ExtNumber3}}&disabled=0&did=0038735900903&groupid={{DIDGroupID}}&e164=0038735900903",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "{{TrunkID1}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "0",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber3}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "0",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "0038735900905",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "e164_2",
									"value": "0038735900905",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								},
								{
									"key": "did",
									"value": "0038735900903"
								},
								{
									"key": "groupid",
									"value": "{{DIDGroupID}}"
								},
								{
									"key": "e164",
									"value": "0038735900903"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "272:Listing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"DID-IDs\");",
									"pm.collectionVariables.unset(\"DID-IDs\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"No DID found. Try with different values for Server or Ext field!\");",
									"        pm.test('No found error', function () {",
									"            pm.expect.fail(\"No DID found for given inputs.Try with different values for Server or Ext field!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure and loop through DIDs data",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DIDs array from the environment",
									"            var didIDs = pm.collectionVariables.get('DID-IDs') || [];",
									"            ",
									"            for (var didID in responseBody) {",
									"                var didData = responseBody[didID];",
									"                ",
									"                // Validate specific properties for each DID",
									"                pm.test('DID ' + didID + ' Data Validation', function () {",
									"                    pm.expect(didData).to.be.an('object');",
									"                    pm.expect(didData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('number2').that.is.oneOf([null, 'string']);",
									"                    pm.expect(didData).to.have.property('server').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('trunk').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('type').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                    pm.expect(didData).to.have.property('sms_enabled').that.is.oneOf([null,'1', '0']);",
									"",
									"                    // Validate e164 field",
									"                    if (didData.e164 !== null) {",
									"                        pm.expect(didData.e164).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"",
									"                     // Validate e164_2 field",
									"                     if (didData.e164_2 !== null) {",
									"                        pm.expect(didData.e164_2).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"                    ",
									"                    // Print the result for each DID",
									"                    /*console.log('DID ID:', didID);",
									"                    console.log('DID Number:', didData.number);",
									"                    console.log('DID Number2:', didData.number2);",
									"                    console.log('Server ID:', didData.server);",
									"                    console.log('Trunk ID:', didData.trunk);",
									"                    console.log('DID Type:', didData.type);",
									"                    console.log('Extension:', didData.ext);",
									"                    console.log('E.164 Number:', didData.e164);",
									"                    console.log('E.164 Number2:', didData.e164_2);",
									"                    console.log('Status:', didData.status);",
									"                    console.log('SMS Enabled:', didData.sms_enabled);",
									"                    console.log();*/",
									"",
									"                    // Push the new DID ID to the DIDs array",
									"                    didIDs.push(didID);",
									"                });",
									"            }",
									"            // Update the DIDs array in the environment",
									"            pm.collectionVariables.set('DID-IDs', didIDs);",
									"            pm.environment.set('DID-IDs', didIDs);",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.list",
									"description": "Listing of DIDs, by default, will include all DIDs."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter DID list by Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used. You can use CSV file \"SrvTenantIDs.csv\" to get all DIDs of tenants."
								},
								{
									"key": "ext",
									"value": "",
									"description": "Filter DID list by Destination Number. (Regex: /^[\\\\d,]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "273:Deleting DID from group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"",
									"        pm.collectionVariables.set(\"DID_ID_3\",null);",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server=1&id={{DID_ID_3}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID_ID_3}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "274:Deleting DID Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Success Message Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DIDGroupID\",null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.didgroup.delete&server=1&id={{DIDGroupID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.didgroup.delete",
									"description": "For Deleting few DID groups use CSV file DIDGroup.csv"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Always must be set to 1."
								},
								{
									"key": "id",
									"value": "{{DIDGroupID}}",
									"description": "DID Group ID"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DID Standard Mode",
			"item": [
				{
					"name": "275:DID mode standard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if response is defined",
									"if (responseBody === undefined) {",
									"    console.error(\"Test Failed: Response is undefined\");",
									"    pm.test('Undefined Response', function () {",
									"        pm.expect.fail(\"Response is undefined\");",
									"    });",
									"} else {",
									"    // Check if there is an error field in the response",
									"    if ('error' in responseBody) {",
									"        console.error(\"Test Failed: \" + responseBody.error);",
									"        pm.test('API Response Error', function () {",
									"            pm.expect.fail(responseBody.error);",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.have.property('success', 'Server ID: 1.');",
									"            pm.expect(responseBody).to.have.property('id', '1');",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.server.didmode&didmode=standard",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.server.didmode"
								},
								{
									"key": "didmode",
									"value": "standard",
									"description": "DID mode on master tenant. (Regex: /^(standard|groups)$/)"
								}
							]
						},
						"description": "API request to change DID mode on MT version of PBXware."
					},
					"response": []
				},
				{
					"name": "276:Adding DID 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number'); ",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_ID_1\", responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.add&server={{TenantID}}&name={{ExtName1}}&trunk={{TrunkID1}}&did={{DID1}}&dest_type={{DestType}}&destination={{ExtNumber1}}&disabled={{DID-Disabled}}&e164={{DID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{ExtName1}}"
								},
								{
									"key": "trunk",
									"value": "{{TrunkID1}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "did",
									"value": "{{DID1}}",
									"description": "Actual DID number. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber1}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "{{DID-Disabled}}",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "{{DID1}}",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "277:Adding DID 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');     ",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_ID_2\", responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.add&server={{TenantID}}&name={{ExtName2}}&trunk={{TrunkID2}}&did={{DID2}}&dest_type={{DestType}}&destination={{ExtNumber2}}&disabled={{DID-Disabled}}&e164={{DID2}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{ExtName2}}"
								},
								{
									"key": "trunk",
									"value": "{{TrunkID2}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "did",
									"value": "{{DID2}}",
									"description": "Actual DID number. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber2}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "{{DID-Disabled}}",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "{{DID2}}",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "278:Adding DID 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"    });",
									"    pm.collectionVariables.set(\"DID_ID_3\", responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.add&server={{TenantID}}&name={{ExtName3}}&trunk={{TrunkID3}}&did={{DID3}}&dest_type={{DestType}}&destination={{ExtNumber3}}&disabled={{DID-Disabled}}&e164={{DID3}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.add",
									"description": "If want to add more DID in one move use CSV file AddDIDs.csv."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "{{ExtName3}}"
								},
								{
									"key": "trunk",
									"value": "{{TrunkID3}}",
									"description": "Trunk ID to which DID is mapped. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "did",
									"value": "{{DID3}}",
									"description": "Actual DID number. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "dest_type",
									"value": "{{DestType}}",
									"description": "Destination Type for DID. (Required) (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber3}}",
									"description": "DID destination. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "disabled",
									"value": "{{DID-Disabled}}",
									"description": "Disable DID by default (Required)  1: Disabled  0: Enabled"
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "{{DID3}}",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "279:Editing DID 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the result for each edited DID",
									"        console.log('Edited DID ID:', responseBody.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.edit&server={{TenantID}}&id={{DID_ID_3}}&name=FixName_API&sms_enabled=1&preserve_callerid=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.edit",
									"description": "If want to edit more DID in one move use CSV file Add&EditDIDs.csv. In CSV file just populate field for Srv/Tenant-ID and DID-IDs."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required)   If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.   ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{DID_ID_3}}",
									"description": "DID ID (Required)"
								},
								{
									"key": "name",
									"value": "FixName_API"
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Trunk ID to which DID is mapped. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "did",
									"value": "",
									"description": "Actual DID number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dest_type",
									"value": "",
									"description": "Destination Type for DID. (Regex: /^\\\\d{1}$/)\n0: Extension\n1: Forward DID to Extension (Multi User)\n2: Ring Group\n3: IVR\n4: Queues\n5: External Number\n6: IVR tree\n7: Voicemail\n8: Remote Access\n9: Conferences\n10: Trunk\n11: Fax to E-mail\n12: Phone Callback\n13: Deny Access\n14: CRM Routing\n15: Agents\n16: ARI Application\n17: Parking Lot\n",
									"disabled": true
								},
								{
									"key": "destination",
									"value": "",
									"description": "DID destination. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "disabled",
									"value": "",
									"description": "Disable DID by default.  1: Disabled  0: Enabled",
									"disabled": true
								},
								{
									"key": "did2",
									"value": "",
									"description": "DID number (end)",
									"disabled": true
								},
								{
									"key": "groupid",
									"value": "",
									"description": "DID Group ID",
									"disabled": true
								},
								{
									"key": "e164",
									"value": "",
									"description": "E.164 Number (start) (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "e164_2",
									"value": "",
									"description": "E.164 Number (end). (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+\\\\w%]+>)?$/)",
									"disabled": true
								},
								{
									"key": "splan",
									"value": "",
									"description": "Service Plan. (Regex: /^(0|-1|2147483647)$/)",
									"disabled": true
								},
								{
									"key": "billingext",
									"value": "",
									"description": "Billing Extension. (deprecated and will be soon replaced with call_rating_ext) (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Greeting. (Regex: /^greeting\\\\-did\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "stripn",
									"value": "",
									"description": "Strip N digits. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "qprio",
									"value": "",
									"description": "Queue Priority. (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "codec",
									"value": "",
									"description": "Force Codec. (Regex: /^(ulaw|alaw|g722|opus|g723|g726|g726aal2|g729|gsm|ilbc|speex|speex16|speex32|lpc10|h261|h263|h263p|h264)+$/)",
									"disabled": true
								},
								{
									"key": "ringtone",
									"value": "",
									"description": "Custom Ringtone. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "recordcall",
									"value": "",
									"description": "Record Call. (Regex: /^(1|0|2)$/)",
									"disabled": true
								},
								{
									"key": "state_text",
									"value": "",
									"description": "County. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "city",
									"value": "",
									"description": "City. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "areacode",
									"value": "",
									"description": "Area Code. (Regex: /^.+$/)",
									"disabled": true
								},
								{
									"key": "sms_enabled",
									"value": "1",
									"description": "Use DID as SMS number. (Regex: /^(1|0)$/)"
								},
								{
									"key": "preserve_callerid",
									"value": "1",
									"description": "Preserve Orginal Caller ID. (Regex: /^(1|0)$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "280:Listing DIDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"DID-IDs\");",
									"pm.collectionVariables.unset(\"DID-IDs\");",
									"",
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.log(\"No DID found. Try with different values for Server or Ext field!\");",
									"        pm.test('No found error', function () {",
									"            pm.expect.fail(\"No DID found for given inputs.Try with different values for Server or Ext field!\");",
									"        });",
									"    } else {",
									"        // Validate the response structure and loop through DIDs data",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Get the existing DIDs array from the environment",
									"            var didIDs = pm.collectionVariables.get('DID-IDs') || [];",
									"            ",
									"            for (var didID in responseBody) {",
									"                var didData = responseBody[didID];",
									"                ",
									"                // Validate specific properties for each DID",
									"                pm.test('DID ' + didID + ' Data Validation', function () {",
									"                    pm.expect(didData).to.be.an('object');",
									"                    pm.expect(didData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('number2').that.is.oneOf([null, 'string']);",
									"                    pm.expect(didData).to.have.property('server').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('trunk').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('type').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(didData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"                    pm.expect(didData).to.have.property('sms_enabled').that.is.oneOf([null,'1', '0']);",
									"",
									"                    // Validate e164 field",
									"                    if (didData.e164 !== null) {",
									"                        pm.expect(didData.e164).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"",
									"                     // Validate e164_2 field",
									"                     if (didData.e164_2 !== null) {",
									"                        pm.expect(didData.e164_2).to.be.a('string').and.match(/^\\d+$/);",
									"                    }",
									"                    ",
									"                    // Print the result for each DID",
									"                    console.log('DID ID:', didID);",
									"                    console.log('DID Number:', didData.number);",
									"                    console.log('DID Number2:', didData.number2);",
									"                    console.log('Server ID:', didData.server);",
									"                    console.log('Trunk ID:', didData.trunk);",
									"                    console.log('DID Type:', didData.type);",
									"                    console.log('Extension:', didData.ext);",
									"                    console.log('E.164 Number:', didData.e164);",
									"                    console.log('E.164 Number2:', didData.e164_2);",
									"                    console.log('Status:', didData.status);",
									"                    console.log('SMS Enabled:', didData.sms_enabled);",
									"                    console.log();",
									"",
									"                    // Push the new DID ID to the DIDs array",
									"                    didIDs.push(didID);",
									"                });",
									"            }",
									"            // Update the DIDs array in the environment",
									"            pm.collectionVariables.set('DID-IDs', didIDs);",
									"            pm.environment.set('DID-IDs', didIDs);",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"DID-IDs\", null);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.list",
									"description": "Listing of DIDs, by default, will include all DIDs."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter DID list by Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used. You can use CSV file \"SrvTenantIDs.csv\" to get all DIDs of tenants."
								},
								{
									"key": "ext",
									"value": "",
									"description": "Filter DID list by Destination Number. (Regex: /^[\\\\d,]+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "547:Adding CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_CLI_RouteID\", responseBody.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.add&id={{DID_ID_1}}&server={{TenantID}}&callerid=38735999999&dest_type=0&destination={{ExtNumber2}}&matchexplicitly=0",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.add",
									"description": "If need to add multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID_ID_1}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "callerid",
									"value": "38735999999",
									"description": "Caller ID (Required). (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "0",
									"description": "Destination type (Required)\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber2}}",
									"description": "Destination value (Required)\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "0",
									"description": "Match explicitly (0 or 1) (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "548:Editing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.edit&id={{DID_ID_1}}&server={{TenantID}}&cliroutingid={{DID_CLI_RouteID}}&callerid=38735999888&dest_type=0&destination={{ExtNumber1}}&matchexplicitly=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.edit",
									"description": "Editing CLI Routing. Arguments are identical to the ones in Adding CLI Routing section. If need to edit multiple CLI Routings on multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID_ID_1}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "cliroutingid",
									"value": "{{DID_CLI_RouteID}}",
									"description": "CLI Routing ID. (Required) (Regex: /^\\\\d+$/)"
								},
								{
									"key": "callerid",
									"value": "38735999888",
									"description": "Caller ID. (Regex: /^\\\\d+$/)."
								},
								{
									"key": "dest_type",
									"value": "0",
									"description": "Destination type\n0: Extension\n1: Multi User\n2: Ring Group\n3: IVR\n4: Queues\n5: Voicemail\n6: Remote Access\n7: Conferences\n8: Trunk\n9: Fax to E-mail\n10: Deny Access (No value)\n11: CRM Routing\n"
								},
								{
									"key": "destination",
									"value": "{{ExtNumber1}}",
									"description": "Destination value\nIf Destination type is Trunk, enter ID of Trunk for Destination value\nIf Destination type is CRM Routing, enter ID of CRM Routing rule for Destination value"
								},
								{
									"key": "matchexplicitly",
									"value": "1",
									"description": "Match explicitly (0 or 1)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "549:Listing CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if \"success\" field is an empty array",
									"if (Array.isArray(responseBody.success) && responseBody.success.length === 0) {",
									"    console.error(\"Test Failed: There is no CLI routing created for selected DID!\");",
									"    pm.test('No CLI Routing Found', function () {",
									"        pm.expect.fail(\"There is no CLI routing created for selected DID!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each CLI routing entry",
									"        for (var cliroutingId in responseBody.success) {",
									"            var clirouting = responseBody.success[cliroutingId];",
									"            pm.expect(clirouting).to.be.an('object');",
									"",
									"            pm.test(`CLI Routing ${cliroutingId} Validation`, function () {",
									"                pm.expect(clirouting).to.have.property('callerid').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('ext').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('type').that.is.a('string');",
									"                pm.expect(clirouting).to.have.property('matchtype').that.is.a('string');",
									"            });",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.list&id={{DID_ID_1}}&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.list"
								},
								{
									"key": "id",
									"value": "{{DID_ID_1}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CDRs",
			"item": [
				{
					"name": "281:Downloading CDRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('next_page').that.is.a('boolean');",
									"        pm.expect(responseBody).to.have.property('limit').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('records').that.is.a('number');",
									"        pm.expect(responseBody).to.have.property('header');",
									"        pm.expect(responseBody).to.have.property('csv').that.is.an('array');",
									"",
									"        // Check if header is null",
									"        if (responseBody.header === null) {",
									"            console.log('No Data available for given date/time!');",
									"            pm.test('No Data available for given date/time!', function () {",
									"                pm.expect(true).to.be.true; // Mark the test as Pass with a custom message",
									"            });",
									"        } else {",
									"            // Header is an array, validate it",
									"            var expectedHeader = [",
									"                \"Tenant\",",
									"                \"From\",",
									"                \"To\",",
									"                \"Date/Time\",",
									"                \"Total Duration\",",
									"                \"Rating Duration\",",
									"                \"Rating Cost\",",
									"                \"Status\",",
									"                \"ID\",",
									"                \"Recording Path\",",
									"                \"Recording Available\",",
									"                \"Location Type\"",
									"            ];",
									"",
									"            pm.expect(responseBody.header).to.deep.equal(expectedHeader);",
									"",
									"            /*",
									"            // Print the success message",
									"            console.log('Success:', responseBody.success);",
									"            console.log('Next Page:', responseBody.next_page);",
									"            console.log('Limit:', responseBody.limit);",
									"            console.log('Records:', responseBody.records);",
									"",
									"            // Loop through records",
									"            for (var record of responseBody.csv) {",
									"                console.log('Record:', record);",
									"                console.log('Tenant:', record[0]);",
									"                console.log('From:', record[1]);",
									"                console.log('To:', record[2]);",
									"                console.log('Date/Time:', record[3]);",
									"                console.log('Total Duration:', record[4]);",
									"                console.log('Rating Duration:', record[5]);",
									"                console.log('Rating Cost:', record[6]);",
									"                console.log('Status:', record[7]);",
									"                console.log('ID:', record[8]);",
									"                console.log('Recording Path:', record[9]);",
									"            }*/",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.cdr.download&start=Sep-27-2022&end=Sep-27-2030",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.cdr.download",
									"description": "Download CDRs"
								},
								{
									"key": "start",
									"value": "Sep-27-2022",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "13:00:00",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "end",
									"value": "Sep-27-2030",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "13:05:00",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 ⇒ \"Answered\", 4 ⇒ \"Unanswered\", 2 ⇒ \"Busy\", 1 ⇒ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 ⇒ \"Incoming\", 2 ⇒ \"Outgoing\", 3 ⇒ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "282:CDR Billamount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('billamount').that.is.a('string');",
									"",
									"        // Print the bill amount",
									"        console.log('Bill Amount:', responseBody.billamount);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.cdr.billamount&start=Sep-01-2022&end=Sep-31-2030",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.cdr.billamount"
								},
								{
									"key": "start",
									"value": "Sep-01-2022",
									"description": "Start Date (Required). Format is: mmm-dd-YYYY (eg: Feb-01-2009)"
								},
								{
									"key": "starttime",
									"value": "",
									"description": "Start Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 00:00:00",
									"disabled": true
								},
								{
									"key": "end",
									"value": "Sep-31-2030",
									"description": "End Date (Required). Format is: mmm-dd-YYYY (eg: Feb-28-2009)"
								},
								{
									"key": "endtime",
									"value": "",
									"description": "End Time. Format is: hh:mm:ss (eg:23:59:59). Default value is 23:59:59",
									"disabled": true
								},
								{
									"key": "ext",
									"value": "",
									"description": "Source extension. You can filter by multiple destinations separated by comma (100,120). Defaults to all extensions/numbers.",
									"disabled": true
								},
								{
									"key": "extdst",
									"value": "",
									"description": "Destination extension.You can filter by multiple extensions separated by comma (100,120). Defaults to all extensions/numbers",
									"disabled": true
								},
								{
									"key": "trunk",
									"value": "",
									"description": "Source Trunk ID. Note: You cannot supply trunk and ext at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "trunkdst",
									"value": "",
									"description": "Destination Trunk ID. Note: You cannot supply trunkdst and extdst at the same time! Defaults to all trunks, unless otherwise specified",
									"disabled": true
								},
								{
									"key": "page",
									"value": "",
									"description": "CDR page. Download CDRs from relevant page (depends on limit argument)\nDefault is to download first page. Total number of pages is not available, look for next_page in response",
									"disabled": true
								},
								{
									"key": "limit",
									"value": "",
									"description": "Limiting records per page. You can limit number of CDRs to download (per page, default page is 1). Default value is 16. Maximum value you can set is: 1000",
									"disabled": true
								},
								{
									"key": "server",
									"value": "",
									"description": "Filtering records per server. You can filter CDRs by Server ID",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "Filtering records by call status. You can filter CDRs by call status. Status values (8 ⇒ \"Answered\", 4 ⇒ \"Unanswered\", 2 ⇒ \"Busy\", 1 ⇒ \"Failed\")",
									"disabled": true
								},
								{
									"key": "cdrtype",
									"value": "",
									"description": "Filtering records by CDR type.Type values (1 ⇒ \"Incoming\", 2 ⇒ \"Outgoing\", 3 ⇒ \"All\")",
									"disabled": true
								},
								{
									"key": "timezone",
									"value": "",
									"description": "Time Zone to apply when searching CDRs. Ex: \"America/New_York\"",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# CDRs\n\nSupported Methods:\n\n`download` \\- Download CDRs\n\n`billamount` \\- Returns sum of billing amounts"
		},
		{
			"name": "IVR",
			"item": [
				{
					"name": "283:Adding IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"",
									"        pm.collectionVariables.set(\"IVR_ID\", responseBody.id);",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.add&server={{TenantID}}&name=Test_IVR1&ext=904&greeting=greeting-default-attendant&status=1&keymap[1][type]=ex&keymap[1][destination]=901",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.add",
									"description": "To add multiple IVRs use IVRs.csv file."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "Test_IVR1",
									"description": "IVR name. (Required). No spaces are allowed at the moment."
								},
								{
									"key": "ext",
									"value": "904",
									"description": "IVR extension number. (Required)"
								},
								{
									"key": "greeting",
									"value": "greeting-default-attendant",
									"description": "IVR Greeting (Required). All greetings must begin with greeting-."
								},
								{
									"key": "status",
									"value": "1",
									"description": "IVR status  1: Enabled   0: Disabled"
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only)",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4.",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds)",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1.",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1.",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3.",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "{{Key0Type}}",
									"description": "Array of IVR keymaps (At least one keymap is required)\nThis argument is to be sent as keymap[key][field]=value\nSupported keys:\n   0-9\n   \\*\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail\n   rg: Dial Groups and ERGs\nExample:  keymap[\\*][type]=aa&keymap[\\*][destination]=103\n",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "{{Key0Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "ex"
								},
								{
									"key": "keymap[1][destination]",
									"value": "901"
								},
								{
									"key": "keymap[2][type]",
									"value": "{{Key2Type}}",
									"disabled": true
								},
								{
									"key": "keymap[2][destination]",
									"value": "{{Key2Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[3][type]",
									"value": "{{Key3Type}}",
									"disabled": true
								},
								{
									"key": "keymap[3][destination]",
									"value": "{{Key3Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[4][type]",
									"value": "{{Key4Type}}",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "{{Key4Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "{{Key5Type}}",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "{{Key5Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "{{Key6Type}}",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "{{Key6Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "{{Key7Type}}",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "{{Key7Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "{{Key8Type}}",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "{{Key8Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "{{Key9Type}}",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "{{Key9Dest}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][type]",
									"value": "{{Key*Type}}",
									"disabled": true
								},
								{
									"key": "keymap[\\*][destination]",
									"value": "{{Key*Dest}}",
									"disabled": true
								},
								{
									"key": "skip_invalid_selection",
									"value": "",
									"description": "1 - Enabled, 0 - Disabled",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "284:Editing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('IVR ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.edit&server={{TenantID}}&id={{IVR_ID}}&name=API_IVR_Name",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.edit",
									"description": "To edit multiple IVRs use IVRs.csv file, and populate column IVRsID."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{IVR_ID}}",
									"description": "IVRs ID. (Required)"
								},
								{
									"key": "name",
									"value": "API_IVR_Name",
									"description": "IVR name. No spaces are allowed at the moment. (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "ext",
									"value": "",
									"description": "IVR extension number. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "IVR Greeting. All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "status",
									"value": "",
									"description": "IVR status  1: Enabled   0: Disabled",
									"disabled": true
								},
								{
									"key": "operator",
									"value": "",
									"description": "Operator extension. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "disablecid",
									"value": "",
									"description": "Disable CallerID (PIN-based IVR only). Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "tresponse",
									"value": "",
									"description": "Response timeout (in seconds) Default is 4. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "rtpdelay",
									"value": "",
									"description": "RTP Delay (in seconds). (Regex: /^\\\\d{1,3}$/). Default is 1",
									"disabled": true
								},
								{
									"key": "tdigit",
									"value": "",
									"description": "Digit timeout (in seconds) Default is 1. (Regex: /^\\\\d{1,5}$/)",
									"disabled": true
								},
								{
									"key": "rings",
									"value": "",
									"description": "Rings to Answer. Default is 1. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "faxemail",
									"value": "",
									"description": "FAX Email. (Regex: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]+$/)",
									"disabled": true
								},
								{
									"key": "customring",
									"value": "",
									"description": "Custom ring tone. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "local2fax",
									"value": "",
									"description": "FAX dialing. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "rangelimit",
									"value": "",
									"description": "Enable range limit. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "rangestart",
									"value": "",
									"description": "Start at. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "rangeend",
									"value": "",
									"description": "End at. (Regex: /^\\\\d{1,3}$/)",
									"disabled": true
								},
								{
									"key": "ringtype",
									"value": "",
									"description": "Ringing Type\n   ring: Generate Ringing\n   moh: Music on Hold\n   none: None\n   Default is ring.",
									"disabled": true
								},
								{
									"key": "moh",
									"value": "",
									"description": "Music on Hold class. Applies only if ringtype is set to moh.",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of loops before timoeut. Default is 3. (Regex: /^([1-9]|1[0-9]|20)$/)",
									"disabled": true
								},
								{
									"key": "timeoutext",
									"value": "",
									"description": "Timeout Extension. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "timeoutextvm",
									"value": "",
									"description": "Timeout Extension Is Voicemail. Yes=1, No=0, NotSet=2",
									"disabled": true
								},
								{
									"key": "localdial",
									"value": "",
									"description": "Local/Remote dialing   1: Enabled   0: Disabled   It is disabled by default.",
									"disabled": true
								},
								{
									"key": "keymap[0][type]",
									"value": "",
									"description": "Array of IVR keymaps. This argument is to be sent as keymap[key][field]=value\nSupported keys: \"0-9\" and  \"\\*\"\nSupported fields:\n   type: Destination Type\n   destination: Destination (can be any valid extension)\nSupported Destination Types:\n   aa: IVR\n   qu: Queue\n   cf: Conference\n   ex: Extension\n   vm: Voicemail\n   rg: Dial Groups and ERGs",
									"disabled": true
								},
								{
									"key": "keymap[0][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[1][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[1][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[2][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[2][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[3][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[3][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[4][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[4][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[5][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[5][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[6][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[6][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[7][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[7][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[8][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[8][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[9][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[9][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[/*][type]",
									"value": "",
									"disabled": true
								},
								{
									"key": "keymap[/*][destination]",
									"value": "",
									"disabled": true
								},
								{
									"key": "skip_invalid_selection",
									"value": "",
									"description": "1 - Enabled, 0 - Disabled",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "285:Listing IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There are no IVRs to show!\");",
									"    pm.test('Empty Response Validation', function () {",
									"        pm.expect.fail(\"There are no IVRs to show!\");",
									"    });",
									"} else {",
									"    // Get the existing IVR IDs array from the environment",
									"    var ivrIDs = pm.collectionVariables.get('IVR-ID') || [];",
									"    ",
									"    // Loop through IVR data",
									"    for (var ivrID in responseBody) {",
									"        var ivrData = responseBody[ivrID];",
									"        ",
									"        // Validate specific properties for each IVR",
									"        pm.test('IVR ' + ivrID + ' Data Validation', function () {",
									"            pm.expect(ivrData).to.be.an('object');",
									"            pm.expect(ivrData).to.have.property('name').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('type').that.is.oneOf(['0', '1', '2']);",
									"            pm.expect(ivrData).to.have.property('ext').that.is.a('string');",
									"            pm.expect(ivrData).to.have.property('keymap');",
									"            pm.expect(ivrData).to.have.property('status').that.is.oneOf(['enabled', 'disabled']);",
									"            pm.expect(ivrData).to.have.property('operator').that.is.oneOf([null, 'string']);",
									"            ",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.list",
									"description": "Listing of IVRs, by default, will include all IVRs. If you wish to filter by server/tenant, you have to specify correct server argument. List of Tenant IDs, you can fetch from tenant object."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter IVR list by Server/Tenant ID If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ring Groups",
			"item": [
				{
					"name": "286:Adding Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"",
									"        pm.collectionVariables.set(\"RG_ID\", responseBody.id);",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Ring Group ID:', responseBody.id);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.add&server={{TenantID}}&name=Test_RG_Name&ext=905&extensions=901,902",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.add",
									"description": "To add multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "name",
									"value": "Test_RG_Name",
									"description": "Ring Group name. (Required)"
								},
								{
									"key": "ext",
									"value": "905",
									"description": "Ring Group number. (Required)"
								},
								{
									"key": "extensions",
									"value": "901,902",
									"description": "List of all ring group extensions separated by ,"
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": "",
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "287:Editing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Successfully edited Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.edit&server={{TenantID}}&id={{RG_ID}}&name=API_RG_Name",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.edit",
									"description": "To edit multiple RGs use RGs.csv file."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant or Server ID (Required). If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "id",
									"value": "{{RG_ID}}",
									"description": "Ring Group ID. (Required)"
								},
								{
									"key": "name",
									"value": "API_RG_Name",
									"description": "Ring Group name."
								},
								{
									"key": "ext",
									"value": "{{RGNum}}",
									"description": "Ring Group extension.",
									"disabled": true
								},
								{
									"key": "extensions",
									"value": "{{RGExt}}",
									"description": "List of all ring group extensions separated by ,",
									"disabled": true
								},
								{
									"key": "max_limit",
									"value": "",
									"description": "Number of concurrent calls allowed into Ring Group (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "greeting",
									"value": "",
									"description": "Ring Group Greeting All greetings must begin with greeting-. (Regex: /^greeting\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "ganswer",
									"value": "",
									"description": "Perform Answer on undefined greeting (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "timeout_msg",
									"value": "",
									"description": "Timeout message. All timeout messages begin with announce-. (Regex: /^announce\\\\-([\\\\w\\\\-]+)$/)",
									"disabled": true
								},
								{
									"key": "loops",
									"value": "",
									"description": "Number of Ring loops (default is 1). (Regex: /^\\\\d{1,2}$/)",
									"disabled": true
								},
								{
									"key": "timeout",
									"value": "",
									"description": "Timeout for Ring Group (default is 30 seconds). (Regex: /^\\\\d{1,8}$/)",
									"disabled": true
								},
								{
									"key": "overwrite_timeout",
									"value": "",
									"description": "Force Ring Group Timeout (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "dial_options",
									"value": "",
									"description": "Dial options (default is r). (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "store_cdr",
									"value": "",
									"description": "Store Unanswered CDRs (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "last_dest",
									"value": "",
									"description": "Last Destination. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "last_dest_vm",
									"value": "",
									"description": "Last Destination is Voicemail (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "ring_strategy",
									"value": "",
									"description": "Ring Strategy. List of available strategies:\n   all (Default)\n   leastrecent\n   round\n   round_memory",
									"disabled": true
								},
								{
									"key": "custom_ringtone",
									"value": "",
									"description": "Custom Ringtone for SIP devices. (Regex: /^\\\\w+$/)",
									"disabled": true
								},
								{
									"key": "callerid",
									"value": "",
									"description": "Replace Caller ID. (Regex: /^[\\\\+\\\\w\\\\s%]+(\\\\s*<[\\\\+%\\\\w]+>)?$/)",
									"disabled": true
								},
								{
									"key": "record",
									"value": "",
									"description": "Record calls (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "record_silent",
									"value": "",
									"description": "Silent Recordings (Specify yes or no)",
									"disabled": true
								},
								{
									"key": "exit_digit",
									"value": "",
									"description": "Exit Digit. (Regex: /^\\\\d{1}$/)",
									"disabled": true
								},
								{
									"key": "exit_ext",
									"value": "",
									"description": "Exit Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								},
								{
									"key": "confirm_calls",
									"value": "",
									"description": "Confirm Calls. (Regex: /^(yes|no)$/)",
									"disabled": true
								},
								{
									"key": "confirm_msg",
									"value": "",
									"description": "Confirmation Message. All confirmation messages begin with rg-announce-.",
									"disabled": true
								},
								{
									"key": "confirm_answered_msg",
									"value": "",
									"description": "Call Answered Message. All call answered messages begin with rg-late-announce-.",
									"disabled": true
								},
								{
									"key": "call_rating_ext",
									"value": "",
									"description": "Call Rating Extension. (Regex: /^\\\\d{3}$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "550:Ring Groups Configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each ring group in the response",
									"        for (var ringGroupId in responseBody) {",
									"            if (responseBody.hasOwnProperty(ringGroupId)) {",
									"                var ringGroup = responseBody[ringGroupId];",
									"",
									"                pm.test('Ring Group ID ' + ringGroupId + ' Configuration Validation', function () {",
									"                    pm.expect(ringGroup).to.have.property('name').that.is.a('string');",
									"                    pm.expect(ringGroup).to.have.property('ext').that.is.a('string');",
									"                    pm.expect(ringGroup).to.have.property('destinations').that.is.a('string');",
									"                    ",
									"                    pm.expect(ringGroup).to.have.property('options').that.is.an('object');",
									"                    var options = ringGroup.options;",
									"                    pm.expect(options).to.have.property('timeout').that.is.a('string');",
									"                    pm.expect(options).to.have.property('last_dest').that.is.a('string');",
									"                    pm.expect(options).to.have.property('greeting').that.is.a('string');",
									"                    pm.expect(options).to.have.property('loops').that.is.a('string');",
									"                    pm.expect(options).to.have.property('exit_digit').that.is.a('string');",
									"                    pm.expect(options).to.have.property('exit_ext').that.is.a('string');",
									"                    pm.expect(options).to.have.property('record').that.is.a('string');",
									"                    pm.expect(options).to.have.property('record_silent').that.is.a('string');",
									"                    pm.expect(options).to.have.property('ganswer').that.is.a('string');",
									"                    pm.expect(options).to.have.property('max_limit').that.is.a('string');",
									"                    pm.expect(options).to.have.property('store_cdr').that.is.a('string');",
									"                    pm.expect(options).to.have.property('overwrite_timeout').that.is.a('string');",
									"                    pm.expect(options).to.have.property('call_rating_ext').that.is.a('string');",
									"                    pm.expect(options).to.have.property('looping_mode').that.is.a('string');",
									"                    pm.expect(options).to.have.property('skip_pbd_local').that.is.a('string');",
									"                    pm.expect(options).to.have.property('preserve_callerid').that.is.a('string');",
									"                    pm.expect(options).to.have.property('member_es_disable').that.is.a('string');",
									"                    pm.expect(options).to.have.property('last_dest_vm').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_calls').that.is.a('string');",
									"                    pm.expect(options).to.have.property('timeout_msg').that.is.a('string');",
									"                    pm.expect(options).to.have.property('dial_options').that.is.a('string');",
									"                    pm.expect(options).to.have.property('ring_strategy').that.is.a('string');",
									"                    pm.expect(options).to.have.property('custom_ringtone').that.is.a('string');",
									"                    pm.expect(options).to.have.property('callerid').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_msg').that.is.a('string');",
									"                    pm.expect(options).to.have.property('confirm_answered_msg').that.is.a('string');",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.configuration&server={{TenantID}}&id={{RG_ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.configuration"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Required). If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{RG_ID}}",
									"description": "Ring Group ID. (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "288:Listing Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else if (Object.keys(responseBody).length === 0) {",
									"    console.log(\"There is no Ring Groups for this Server/Tenant!\");",
									"    pm.test('No Ring Groups!', function () {",
									"        pm.expect.fail(\"No Ring Groups for this Server/Tenant!\");",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        ",
									"        // Initialize array to store Ring Group IDs",
									"        var rgIDs = [];",
									"        ",
									"        // Loop through Ring Group data",
									"        for (var ringGroupID in responseBody) {",
									"            var ringGroupData = responseBody[ringGroupID];",
									"            ",
									"            // Validate specific properties for each Ring Group",
									"            pm.test('Ring Group ' + ringGroupID + ' Data Validation', function () {",
									"                pm.expect(ringGroupData).to.be.an('object');",
									"                pm.expect(ringGroupData).to.have.property('name').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('ext').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('destinations').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest').that.is.a('string');",
									"                pm.expect(ringGroupData).to.have.property('last_dest_vm').that.is.oneOf(['yes', 'no']);",
									"                ",
									"            });",
									"        }",
									"        ",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter Ring Group list by Server/Tenant ID. If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. ID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enhanced Ring Groups",
			"item": [
				{
					"name": "551:Add ERGs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"ERGsID\", null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('ERG Created Successfully', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('number');",
									"",
									"        // Extract ERG ID and set it as a collection variable for later use",
									"        pm.collectionVariables.set(\"ERGsID\", responseBody.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.add&server={{TenantID}}&name=ERG_Test&ext=999&max_wait_callers=10&rings_answer=0&record=no&wake_mobile=no&replace_cid=ERG_CID&queue_url=http://domain-name.com&redirect_dest=888&redirect_vm=yes&prioritize_timeout=yes&max_wait_seconds=10&max_wait_dest=999&max_wait_dest_vm=yes&leave_when_empty=yes&empty_dest=666&empty_dest_vm=yes&greeting=queue-greeting-empty&announce_holdtime=yes&announce_position=yes&announce_frequency=30&min_announce_frequency=5&announce_r_seconds=20&static_login=yes&member_es_disable=yes&ring_strategy=ringall&member_ring_timeout=1234&autofill=no&ring_inuse=yes&retry_timeout=123&timeout_restart=yes&wrapup_time=321&periodic_announce=default&periodic_announce_frequency=69&first_periodic_announce=456&incoming_options=tT&ring_timeout=4321&use_exit_digit=yes&exit_digit=9&exit_dest=777&exit_vm=yes&enable_notification=yes&notification_email=not_email@mali.com",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key."
								},
								{
									"key": "action",
									"value": "pbxware.erg.add",
									"description": "Add a new ERG."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "name",
									"value": "ERG_Test",
									"description": "Name of a new ERG. (Required). (Regex: /^[a-zA-Z0-9-_]+$/)"
								},
								{
									"key": "ext",
									"value": "999",
									"description": "Extension number that will be used for ERG. (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "max_wait_callers",
									"value": "10",
									"description": "Maximum number of callers allowed to wait in a ERG at the same time. (Required). (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "rings_answer",
									"value": "0",
									"description": "Number of rings that will be played to a caller before call enters the ERG. (Required). (Regex: /^\\\\d{1}$/)."
								},
								{
									"key": "record",
									"value": "no",
									"description": "Set whether to record ERG calls or not. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "wake_mobile",
									"value": "no",
									"description": "Select whether ERG should wake up mobile devices that are asleep. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "replace_cid",
									"value": "ERG_CID",
									"description": "Replace the caller id with the custom value. (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "queue_url",
									"value": "http://domain-name.com",
									"description": "Send the following URL to Member's softphone, if it supports that option, and the softphone can open that URL so the Member can see callers additional info if available. (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "redirect_dest",
									"value": "888",
									"description": "ERG full redirect extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "redirect_vm",
									"value": "yes",
									"description": "Choose whether the redirect extension is a voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "prioritize_timeout",
									"value": "yes",
									"description": "Set whether to prioritize ERG timeout or not. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "max_wait_seconds",
									"value": "10",
									"description": "Maximum time a caller can wait in an ERG. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "max_wait_dest",
									"value": "999",
									"description": "Set the extension to which caller will be redirected once time set under 'Max Wait Seconds' exceeds. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "max_wait_dest_vm",
									"value": "yes",
									"description": "Set whether the max wait destination is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "leave_when_empty",
									"value": "yes",
									"description": "When there are no members inside a queue, callers will leave it depending on the setting. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "empty_dest",
									"value": "666",
									"description": "When queue doesn\"t have any agent logged in, redirect callers to following destination. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "empty_dest_vm",
									"value": "yes",
									"description": "Set whether the empty destination extension is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "greeting",
									"value": "queue-greeting-empty",
									"description": "Select a greeting file that will be played to all callers waiting in this ERG. (Regex: /^queue-greeting\\\\-([\\\\w\\\\-]+)$/)"
								},
								{
									"key": "announce_holdtime",
									"value": "yes",
									"description": "Enable callers waiting in an ERG to hear the hold-time announcements. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "announce_position",
									"value": "yes",
									"description": "Enable callers waiting in an ERG to hear the position announcements. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "announce_frequency",
									"value": "30",
									"description": "How often to play the hold-time announcement message (time in seconds). (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "min_announce_frequency",
									"value": "5",
									"description": "Specifies the minimum amount of time that must pass before we announce the caller’s position in an ERG again. (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "announce_r_seconds",
									"value": "20",
									"description": "Rounding level for hold-time announcements. (Regex: /^(0|5|10|15|20|30)$/)"
								},
								{
									"key": "static_login",
									"value": "yes",
									"description": "Select whether to enable Static Members Login. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "member_es_disable",
									"value": "yes",
									"description": "If set to 'Yes', Enhanced Enhanced that are enabled on the Extension (that are ERG members) will possibly not be applied if an ERG call is passed to them. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "ring_strategy",
									"value": "ringall",
									"description": "Set the way calls are transferred to ERG members answering the calls. (Regex: /^(ringall|linear|leastrecent|fewestcalls|random|rrmemory|rrordered|wrandom)$/)"
								},
								{
									"key": "member_ring_timeout",
									"value": "1234",
									"description": "Set the Member's ring timeout. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "autofill",
									"value": "no",
									"description": "Should callers be served one by one or in parallel fashion. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "ring_inuse",
									"value": "yes",
									"description": "Set whether Members in use should be called when a new caller comes into the ERG. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "retry_timeout",
									"value": "123",
									"description": "Time interval in seconds, for how long to wait before trying the ERG member again. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "timeout_restart",
									"value": "yes",
									"description": "If this option is set to yes and a BUSY or CONGESTION signal is received on the line, the Member's timeout for answering will be reset. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "wrapup_time",
									"value": "321",
									"description": "After a successful call, this will determine how long to wait (time interval in seconds) before sending a new call to a potentially free member. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "periodic_announce",
									"value": "default",
									"description": "Select the sound file that is played periodically to callers waiting in an ERG (has to be in the following format 'periodic-announce-$NAME.gsm' or 'default')\n(Regex: /^(default|periodic-announce\\\\-([\\\\w\\\\-]+))$/)"
								},
								{
									"key": "periodic_announce_frequency",
									"value": "69",
									"description": "Time interval in seconds at which the periodic message is to be played. (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "first_periodic_announce",
									"value": "456",
									"description": "The minimum number of seconds between position announcements. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "incoming_options",
									"value": "tT",
									"description": "Set the advanced ERG call options. \nt \tallow the called user transfer the calling user\nT \tto allow the calling user to transfer the call.\nH \tallow caller to hang up by hitting *.\nn \tno retries on the timeout will exit this application and go to the next step.\nr \tring instead of playing MOH\nC \tavoid missed calls in ringall strategy"
								},
								{
									"key": "ring_timeout",
									"value": "4321",
									"description": "When 'r' is selected as Incoming Options and this timeout is used, ERG will first ring entered number of seconds after which MOH will start. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "use_exit_digit",
									"value": "yes",
									"description": "Should users be able to exit the ERG by dialing a single digit and be automatically redirected to a preset PBXware destination. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "exit_digit",
									"value": "9",
									"description": "Define the exit digit. (Regex: /^\\\\d{1}$/)"
								},
								{
									"key": "exit_dest",
									"value": "777",
									"description": "Local PBXware destination number that is dialed once the 'Exit Digit' is dialed. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "exit_vm",
									"value": "yes",
									"description": "Set whether the exit digit destination is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "enable_notification",
									"value": "yes",
									"description": "Enable or disable Abandoned Calls Notification feature. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "notification_email",
									"value": "not_email@mali.com",
									"description": "The e-mail address which will receive notifications of abandoned calls, where an abandoned call is one where the caller hangs up the call while waiting to be answered. (Regex: /^[^@]+@[^@]+\\\\.[^@]+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "552:Edit ERGs",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('ERG Created Successfully', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.edit&server={{TenantID}}&id={{ERGsID}}&name=NewERGName&ext=906&max_wait_callers=10&rings_answer=0&record=yes&wake_mobile=yes&replace_cid=NewERG_CID&queue_url=http://test name.com&redirect_dest=902&redirect_vm=no&prioritize_timeout=no&max_wait_seconds=2233&max_wait_dest=902&max_wait_dest_vm=no&leave_when_empty=no&empty_dest=902&empty_dest_vm=no&greeting=queue-greeting-erg&announce_holdtime=no&announce_position=no&announce_frequency=60&min_announce_frequency=2&announce_r_seconds=10&static_login=no&member_es_disable=no&ring_strategy=linear&member_ring_timeout=20&autofill=yes&ring_inuse=no&retry_timeout=30&timeout_restart=no&wrapup_time=15&periodic_announce=periodic-announce-erg&periodic_announce_frequency=30&first_periodic_announce=15&incoming_options=r&ring_timeout=30&use_exit_digit=no&exit_digit=6&exit_dest=902&exit_vm=no&enable_notification=no&notification_email=new_not@email.com",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}",
									"description": "API Key."
								},
								{
									"key": "action",
									"value": "pbxware.erg.edit",
									"description": "Edit already created ERGs."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "Enhanced Ring Group ID"
								},
								{
									"key": "name",
									"value": "NewERGName",
									"description": "Name of a new ERG. (Required). (Regex: /^[a-zA-Z0-9-_]+$/)"
								},
								{
									"key": "ext",
									"value": "906",
									"description": "Extension number that will be used for ERG. (Required). (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "max_wait_callers",
									"value": "10",
									"description": "Maximum number of callers allowed to wait in a ERG at the same time. (Required). (Regex: /^\\\\d{1,5}$/)"
								},
								{
									"key": "rings_answer",
									"value": "0",
									"description": "Number of rings that will be played to a caller before call enters the ERG. (Required). (Regex: /^\\\\d{1}$/)."
								},
								{
									"key": "record",
									"value": "yes",
									"description": "Set whether to record ERG calls or not. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "wake_mobile",
									"value": "yes",
									"description": "Select whether ERG should wake up mobile devices that are asleep. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "replace_cid",
									"value": "NewERG_CID",
									"description": "Replace the caller id with the custom value. (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "queue_url",
									"value": "http://test name.com",
									"description": "Send the following URL to Member's softphone, if it supports that option, and the softphone can open that URL so the Member can see callers additional info if available. (Regex: /^[\\\\w\\\\s]+$/)"
								},
								{
									"key": "redirect_dest",
									"value": "902",
									"description": "ERG full redirect extension number. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "redirect_vm",
									"value": "no",
									"description": "Choose whether the redirect extension is a voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "prioritize_timeout",
									"value": "no",
									"description": "Set whether to prioritize ERG timeout or not. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "max_wait_seconds",
									"value": "2233",
									"description": "Maximum time a caller can wait in an ERG. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "max_wait_dest",
									"value": "902",
									"description": "Set the extension to which caller will be redirected once time set under 'Max Wait Seconds' exceeds. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "max_wait_dest_vm",
									"value": "no",
									"description": "Set whether the max wait destination is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "leave_when_empty",
									"value": "no",
									"description": "When there are no members inside a queue, callers will leave it depending on the setting. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "empty_dest",
									"value": "902",
									"description": "When queue doesn\"t have any agent logged in, redirect callers to following destination. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "empty_dest_vm",
									"value": "no",
									"description": "Set whether the empty destination extension is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "greeting",
									"value": "queue-greeting-erg",
									"description": "Select a greeting file that will be played to all callers waiting in this ERG. (Regex: /^queue-greeting\\\\-([\\\\w\\\\-]+)$/)"
								},
								{
									"key": "announce_holdtime",
									"value": "no",
									"description": "Enable callers waiting in an ERG to hear the hold-time announcements. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "announce_position",
									"value": "no",
									"description": "Enable callers waiting in an ERG to hear the position announcements. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "announce_frequency",
									"value": "60",
									"description": "How often to play the hold-time announcement message (time in seconds). (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "min_announce_frequency",
									"value": "2",
									"description": "Specifies the minimum amount of time that must pass before we announce the caller’s position in an ERG again. (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "announce_r_seconds",
									"value": "10",
									"description": "Rounding level for hold-time announcements. (Regex: /^(0|5|10|15|20|30)$/)"
								},
								{
									"key": "static_login",
									"value": "no",
									"description": "Select whether to enable Static Members Login. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "member_es_disable",
									"value": "no",
									"description": "If set to 'Yes', Enhanced Enhanced that are enabled on the Extension (that are ERG members) will possibly not be applied if an ERG call is passed to them. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "ring_strategy",
									"value": "linear",
									"description": "Set the way calls are transferred to ERG members answering the calls. (Regex: /^(ringall|linear|leastrecent|fewestcalls|random|rrmemory|rrordered|wrandom)$/)"
								},
								{
									"key": "member_ring_timeout",
									"value": "20",
									"description": "Set the Member's ring timeout. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "autofill",
									"value": "yes",
									"description": "Should callers be served one by one or in parallel fashion. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "ring_inuse",
									"value": "no",
									"description": "Set whether Members in use should be called when a new caller comes into the ERG. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "retry_timeout",
									"value": "30",
									"description": "Time interval in seconds, for how long to wait before trying the ERG member again. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "timeout_restart",
									"value": "no",
									"description": "If this option is set to yes and a BUSY or CONGESTION signal is received on the line, the Member's timeout for answering will be reset. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "wrapup_time",
									"value": "15",
									"description": "After a successful call, this will determine how long to wait (time interval in seconds) before sending a new call to a potentially free member. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "periodic_announce",
									"value": "periodic-announce-erg",
									"description": "Select the sound file that is played periodically to callers waiting in an ERG (has to be in the following format 'periodic-announce-$NAME.gsm' or 'default')\n(Regex: /^(default|periodic-announce\\\\-([\\\\w\\\\-]+))$/)"
								},
								{
									"key": "periodic_announce_frequency",
									"value": "30",
									"description": "Time interval in seconds at which the periodic message is to be played. (Regex: /^\\\\d{1,2}$/)"
								},
								{
									"key": "first_periodic_announce",
									"value": "15",
									"description": "The minimum number of seconds between position announcements. (Regex: /^\\\\d{1,3}$/)"
								},
								{
									"key": "incoming_options",
									"value": "r",
									"description": "Set the advanced ERG call options. \nt \tallow the called user transfer the calling user\nT \tto allow the calling user to transfer the call.\nH \tallow caller to hang up by hitting *.\nn \tno retries on the timeout will exit this application and go to the next step.\nr \tring instead of playing MOH\nC \tavoid missed calls in ringall strategy"
								},
								{
									"key": "ring_timeout",
									"value": "30",
									"description": "When 'r' is selected as Incoming Options and this timeout is used, ERG will first ring entered number of seconds after which MOH will start. (Regex: /^\\\\d{1,4}$/)"
								},
								{
									"key": "use_exit_digit",
									"value": "no",
									"description": "Should users be able to exit the ERG by dialing a single digit and be automatically redirected to a preset PBXware destination. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "exit_digit",
									"value": "6",
									"description": "Define the exit digit. (Regex: /^\\\\d{1}$/)"
								},
								{
									"key": "exit_dest",
									"value": "902",
									"description": "Local PBXware destination number that is dialed once the 'Exit Digit' is dialed. (Regex: /^\\\\d{3}$/)"
								},
								{
									"key": "exit_vm",
									"value": "no",
									"description": "Set whether the exit digit destination is pointing to voicemail. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "enable_notification",
									"value": "no",
									"description": "Enable or disable Abandoned Calls Notification feature. (Regex: /^(yes|no)$/)"
								},
								{
									"key": "notification_email",
									"value": "new_not@email.com",
									"description": "The e-mail address which will receive notifications of abandoned calls, where an abandoned call is one where the caller hangs up the call while waiting to be answered. (Regex: /^[^@]+@[^@]+\\\\.[^@]+$/)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "553:Adding Members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.members&server={{TenantID}}&id={{ERGsID}}&numbers=901,902&penalties=10,50",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.members",
									"description": "Adding members to an Enhanced Ring Group. If need to add members in multiple ERGs use ERGs.csv file."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID (Required)"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "ID of an Enhanced Ring Group (Required)"
								},
								{
									"key": "numbers",
									"value": "901,902",
									"description": "List of extension numbers separated with , (Required)"
								},
								{
									"key": "penalties",
									"value": "10,50",
									"description": "List of penalties separated with , (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "554:List ERGs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if response is empty array",
									"    if (Object.keys(responseBody).length === 0) {",
									"        console.log(\"No created Enhanced Ring Groups for this Server/Tenant!\");",
									"        pm.test('No ERG Error', function () {",
									"            pm.expect.fail(\"No ERG created\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            // Loop through ERG data",
									"            for (var ergID in responseBody) {",
									"                var ergData = responseBody[ergID];",
									"",
									"                // Validate specific properties for each ERG",
									"                pm.test('ERG ' + ergID + ' Data Validation', function () {",
									"                    pm.expect(ergData).to.be.an('object');",
									"                    pm.expect(ergData).to.have.property('name').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('number').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('strategy').that.is.a('string');",
									"                    pm.expect(ergData).to.have.property('members').that.is.an('array');",
									"                });",
									"            }",
									"        });",
									"        ",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Routes",
			"item": [
				{
					"name": "289:Listing Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        /*",
									"        // Loop through the route data",
									"        for (var routeID in responseBody) {",
									"            var routeData = responseBody[routeID];",
									"",
									"            // Validate specific properties for each route",
									"            pm.test('Route ' + routeID + ' Data Validation', function () {",
									"                pm.expect(routeData).to.be.an('array');",
									"                pm.expect(routeData).to.have.lengthOf(2);",
									"",
									"                // Print the result for each route",
									"                console.log('Route ID:', routeID);",
									"                console.log('Route Code:', routeData[0]);",
									"                console.log('Route Name:', routeData[1]);",
									"            });",
									"        }",
									"        */",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.route.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.route.list"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Routes\n\nSupported Methods\n\n`list -` List Routes"
		},
		{
			"name": "Destinations",
			"item": [
				{
					"name": "290:Listing Destinations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response body is an empty array",
									"    if (Array.isArray(responseBody) && responseBody.length === 0) {",
									"        console.error(\"Test Failed: There are no destinations created.\");",
									"        pm.test('Empty Response', function () {",
									"            pm.expect.fail(\"There are no destinations created.\");",
									"        });",
									"    } else {",
									"        // Validate the response structure",
									"        pm.test('Response Validation', function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"",
									"            /*",
									"            // Iterate through each destination in the response",
									"            for (var key in responseBody) {",
									"                if (responseBody.hasOwnProperty(key)) {",
									"                    var destination = responseBody[key];",
									"",
									"                    pm.test('Destination ' + destination.destination + ' Validation', function () {",
									"                        pm.expect(destination).to.be.an('object');",
									"                        pm.expect(destination).to.have.property('route').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination').that.is.a('string');",
									"                        pm.expect(destination).to.have.property('destination_group').that.is.a('string');",
									"",
									"                        // Check if \"codes\" is an array",
									"                        pm.expect(destination).to.have.property('codes').that.is.an('array');",
									"",
									"                        // If \"codes\" is an array, validate its structure",
									"                        if (Array.isArray(destination.codes)) {",
									"                            destination.codes.forEach(function (code) {",
									"                                pm.test('Code Validation', function () {",
									"                                    pm.expect(code).to.be.an('object');",
									"                                    pm.expect(code).to.have.property('code1').that.is.a('string');",
									"                                    pm.expect(code).to.have.property('code2').that.is.a('string');",
									"                                });",
									"                            });",
									"                        }",
									"                    });",
									"                }",
									"            }",
									"            */",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.list",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.list"
								},
								{
									"key": "route",
									"value": "",
									"description": "Route ID. (Regex: /^\\\\d+$/)",
									"disabled": true
								},
								{
									"key": "dgroup",
									"value": "",
									"description": "Destination Group ID. Note: Only if route is supplied.(Regex: /^\\\\d+$/)",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "291:Destinations Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Validate the response structure",
									"pm.test('Response Validation', function () {",
									"    pm.expect(responseBody).to.be.an('object');",
									"",
									"    /*",
									"    // Iterate through each destination group in the response",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            var destinationGroupId = key;",
									"            var destinationGroupName = responseBody[key];",
									"",
									"            pm.test('Destination Group ' + destinationGroupName + ' Validation', function () {",
									"                pm.expect(destinationGroupId).to.be.a('string');",
									"                pm.expect(destinationGroupName).to.be.a('string');",
									"            });",
									"        }",
									"    }*/",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.destination.groups",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.destination.groups"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\n\nList Destinations\n\n`groups`\n\nList Destinations Groups"
		},
		{
			"name": "Apps",
			"item": [
				{
					"name": "292:Listing Apps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through each edition/module in the response",
									"        for (var editionName in responseBody) {",
									"            if (responseBody.hasOwnProperty(editionName)) {",
									"                var edition = responseBody[editionName];",
									"",
									"                pm.test(editionName + ' Validation', function () {",
									"                    pm.expect(edition).to.be.an('object');",
									"                    pm.expect(edition).to.have.property('total').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('in_use').that.is.a('number');",
									"                    pm.expect(edition).to.have.property('extensions').that.is.an('array');",
									"",
									"                    // Validate extensions",
									"                    pm.expect(edition.extensions).to.be.an('array');",
									"                    pm.expect(edition.extensions).to.have.lengthOf(edition.in_use);",
									"",
									"                    // Print edition/module details",
									"                    console.log(editionName + ' Total:', edition.total);",
									"                    console.log(editionName + ' In Use:', edition.in_use);",
									"                    console.log(editionName + ' Extensions:', edition.extensions);",
									"                });",
									"            }",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.apps.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.apps.list"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter DID list by Tenant ID.\nIf PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID.\nID 1 is always assigned to Master tenant and cannot be used."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\n\nList Apps"
		},
		{
			"name": "Master Dashboard",
			"item": [
				{
					"name": "293:Ext_Online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('type', 'Extensions Online');",
									"        pm.expect(responseBody).to.have.property('count');",
									"",
									"        // Print the number of online extensions",
									"        console.log(\"Number of online extensions is \" + responseBody.count);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.ext_online&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.ext_online",
									"description": "Display number of Extensions Online"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "294:Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    var failedServices = [];",
									"    var allRunning = true;",
									"",
									"    // Check each service status in the response",
									"    for (var serviceName in responseBody) {",
									"        if (responseBody.hasOwnProperty(serviceName)) {",
									"            var serviceStatus = responseBody[serviceName];",
									"            if (serviceStatus !== \"running\") {",
									"                failedServices.push(serviceName);",
									"                allRunning = false;",
									"            }",
									"        }",
									"    }",
									"",
									"    if (allRunning) {",
									"        console.log(\"All services are in running state\");",
									"        pm.test('All Services Running', function () {",
									"            pm.expect(true).to.be.true; // Mark the request as pass",
									"        });",
									"    } else {",
									"        console.error(\"Test Failed: Some services are not in running state\");",
									"        console.error(\"Failed Services:\", failedServices);",
									"        pm.test('Services Status', function () {",
									"            pm.expect.fail(\"Some services are not in running state\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.services",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.services",
									"description": "Show PBXware services"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "295:SIP_Registrations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the 'SIP Registrations' object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData[\"SIP Registrations\"]).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Check the value of success in SIP Registrations\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['SIP Registrations']).to.exist;",
									"    const { success } = responseData['SIP Registrations'];",
									"    console.log({success});",
									"    const { failed } = responseData['SIP Registrations'];",
									"    console.log({failed});",
									"    const { lagged } = responseData['SIP Registrations'];",
									"    console.log({lagged});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.sip_registrations&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.sip_registrations",
									"description": "Show information of SIP registrations"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "296:Calls Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('now');",
									"        pm.expect(responseBody).to.have.property('last hour');",
									"        pm.expect(responseBody).to.have.property('today');",
									"        pm.expect(responseBody).to.have.property('answared calls');",
									"        pm.expect(responseBody.now).to.be.a('number');",
									"        pm.expect(responseBody['last hour']).to.be.a('number');",
									"        pm.expect(responseBody.today).to.be.a('number');",
									"        pm.expect(responseBody['answared calls']).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.calls&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.calls",
									"description": "Calls Overview."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "297:Glocom Editions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('office');",
									"        pm.expect(responseBody).to.have.property('business');",
									"        pm.expect(responseBody).to.have.property('agent');",
									"        pm.expect(responseBody).to.have.property('supervisor');",
									"        pm.expect(responseBody).to.have.property('ios');",
									"        pm.expect(responseBody).to.have.property('android');",
									"        pm.expect(responseBody.office).to.be.a('number');",
									"        pm.expect(responseBody.business).to.be.a('number');",
									"        pm.expect(responseBody.agent).to.be.a('number');",
									"        pm.expect(responseBody.supervisor).to.be.a('number');",
									"        pm.expect(responseBody.ios).to.be.a('number');",
									"        pm.expect(responseBody.android).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_editions&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_editions",
									"description": "Display information on apps registered to PBXware and the editions"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "298:Glocom Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('glocom_users');",
									"        pm.expect(responseBody.glocom_users).to.be.a('number');",
									"    });",
									"",
									"    // Print the name and value of the field in the response",
									"    console.log(\"Response Details:\");",
									"    console.log(\"glocom_users: \" + responseBody.glocom_users);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_users&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_users",
									"description": "Display number of logged GloCOM users."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "299:Licensing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('ext');",
									"        pm.expect(responseBody).to.have.property('ivr');",
									"        pm.expect(responseBody).to.have.property('queue');",
									"        pm.expect(responseBody).to.have.property('conference');",
									"        pm.expect(responseBody.ext).to.have.property('inuse');",
									"        pm.expect(responseBody.ext).to.have.property('max');",
									"        pm.expect(responseBody.ivr).to.have.property('inuse');",
									"        pm.expect(responseBody.ivr).to.have.property('max');",
									"        pm.expect(responseBody.queue).to.have.property('inuse');",
									"        pm.expect(responseBody.queue).to.have.property('max');",
									"        pm.expect(responseBody.conference).to.have.property('inuse');",
									"        pm.expect(responseBody.conference).to.have.property('max');",
									"",
									"        // Additional validation (optional)",
									"        pm.expect(responseBody.ext.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ext.max).to.be.a('number');",
									"        pm.expect(responseBody.ivr.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ivr.max).to.be.a('number');",
									"        pm.expect(responseBody.queue.inuse).to.be.a('number');",
									"        pm.expect(responseBody.queue.max).to.be.a('number');",
									"        pm.expect(responseBody.conference.inuse).to.be.a('number');",
									"        pm.expect(responseBody.conference.max).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \":\", responseBody[key]);",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.licensing&server=1",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.licensing",
									"description": "Display the percentage usage information of PBXware license for Extensions, IVRs, Queues, and Conferences"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "300:Disk Usage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the disk usage percentage is within a valid range (0-100%)",
									"        var diskUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(diskUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the disk usage percentage value from the response",
									"    console.log(\"Disk Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.disk_usage",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.disk_usage",
									"description": "Display information on current PBXware hard disk usage"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "301:CPU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the CPU usage percentage is within a valid range (0-100%)",
									"        var cpuUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(cpuUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the CPU usage percentage value from the response",
									"    console.log(\"CPU Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.cpu",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.cpu",
									"description": "Display information on CPU usage on the PBXware server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "302:Memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('inuse');",
									"        pm.expect(responseBody.inuse).to.be.a('string');",
									"",
									"        // Check if the memory usage percentage is within a valid range (0-100%)",
									"        var memoryUsagePercentage = parseInt(responseBody.inuse);",
									"        pm.expect(memoryUsagePercentage).to.be.within(0, 100);",
									"    });",
									"",
									"    // Print the memory usage percentage value from the response",
									"    console.log(\"Memory Usage: \" + responseBody.inuse);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.memory",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.memory",
									"description": "Display information on PBXware memory usage"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Dashboard\n\nSupported Methods:\n\n`ext_online` - Display number of Extensions Online\n\n`services` - Display PBXware services\n\n`sip_registrations` - Display information for SIP registration\n\n`calls` - Calls Overview\n\n`glocom_editions` - Display information on apps registered to PBXware and the editions\n\n`glocom_users` - Display number of logged GloCOM users\n\n`licensing` - Display the percentage usage information of PBXware license\n\n`disk_usage` - Display information on current PBXware hard disk usage\n\n`cpu` - Display information on CPU usage on the PBXware server\n\n`memory` - Display information on PBXware memory usage"
		},
		{
			"name": "Tenant Dashboard",
			"item": [
				{
					"name": "303:Ext_Online",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('type', 'Extensions Online');",
									"        pm.expect(responseBody).to.have.property('count');",
									"",
									"        // Print the number of online extensions",
									"        console.log(\"Number of online extensions is \" + responseBody.count);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.ext_online&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.ext_online",
									"description": "Display number of Extensions Online"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "304:SIP_Registrations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate the 'SIP Registrations' object\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData[\"SIP Registrations\"]).to.exist.and.to.be.an('object');",
									"});",
									"",
									"pm.test(\"Check the value of success in SIP Registrations\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData['SIP Registrations']).to.exist;",
									"    const { success } = responseData['SIP Registrations'];",
									"    console.log({success});",
									"    const { failed } = responseData['SIP Registrations'];",
									"    console.log({failed});",
									"    const { lagged } = responseData['SIP Registrations'];",
									"    console.log({lagged});",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.sip_registrations&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.sip_registrations",
									"description": "Show information of SIP registrations"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "305:Calls Overview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('now');",
									"        pm.expect(responseBody).to.have.property('last hour');",
									"        pm.expect(responseBody).to.have.property('today');",
									"        pm.expect(responseBody).to.have.property('answared calls');",
									"        pm.expect(responseBody.now).to.be.a('number');",
									"        pm.expect(responseBody['last hour']).to.be.a('number');",
									"        pm.expect(responseBody.today).to.be.a('number');",
									"        pm.expect(responseBody['answared calls']).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.calls&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.calls",
									"description": "Calls Overview."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "306:Glocom Editions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('office');",
									"        pm.expect(responseBody).to.have.property('business');",
									"        pm.expect(responseBody).to.have.property('agent');",
									"        pm.expect(responseBody).to.have.property('supervisor');",
									"        pm.expect(responseBody).to.have.property('ios');",
									"        pm.expect(responseBody).to.have.property('android');",
									"        pm.expect(responseBody.office).to.be.a('number');",
									"        pm.expect(responseBody.business).to.be.a('number');",
									"        pm.expect(responseBody.agent).to.be.a('number');",
									"        pm.expect(responseBody.supervisor).to.be.a('number');",
									"        pm.expect(responseBody.ios).to.be.a('number');",
									"        pm.expect(responseBody.android).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \": \" + responseBody[key]);",
									"        }",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_editions&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_editions",
									"description": "Display information on apps registered to PBXware and the editions"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "307:Glocom Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected field",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('glocom_users');",
									"        pm.expect(responseBody.glocom_users).to.be.a('number');",
									"    });",
									"",
									"    // Print the name and value of the field in the response",
									"    console.log(\"Response Details:\");",
									"    console.log(\"glocom_users: \" + responseBody.glocom_users);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.glocom_users&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.glocom_users",
									"description": "Display number of logged GloCOM users."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "308:Licensing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Check if the response contains the expected fields",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('ext');",
									"        pm.expect(responseBody).to.have.property('ivr');",
									"        pm.expect(responseBody).to.have.property('queue');",
									"        pm.expect(responseBody).to.have.property('conference');",
									"        pm.expect(responseBody.ext).to.have.property('inuse');",
									"        pm.expect(responseBody.ext).to.have.property('max');",
									"        pm.expect(responseBody.ivr).to.have.property('inuse');",
									"        pm.expect(responseBody.ivr).to.have.property('max');",
									"        pm.expect(responseBody.queue).to.have.property('inuse');",
									"        pm.expect(responseBody.queue).to.have.property('max');",
									"        pm.expect(responseBody.conference).to.have.property('inuse');",
									"        pm.expect(responseBody.conference).to.have.property('max');",
									"",
									"        // Additional validation (optional)",
									"        pm.expect(responseBody.ext.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ext.max).to.be.a('number');",
									"        pm.expect(responseBody.ivr.inuse).to.be.a('number');",
									"        pm.expect(responseBody.ivr.max).to.be.a('number');",
									"        pm.expect(responseBody.queue.inuse).to.be.a('number');",
									"        pm.expect(responseBody.queue.max).to.be.a('number');",
									"        pm.expect(responseBody.conference.inuse).to.be.a('number');",
									"        pm.expect(responseBody.conference.max).to.be.a('number');",
									"    });",
									"",
									"    // Print the names and values of all fields in the response",
									"    console.log(\"Response Details:\");",
									"    for (var key in responseBody) {",
									"        if (responseBody.hasOwnProperty(key)) {",
									"            console.log(key + \":\", responseBody[key]);",
									"        }",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.dashboard.licensing&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.dashboard.licensing",
									"description": "Display the percentage usage information of PBXware license for Extensions, IVRs, Queues, and Conferences"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "# Dashboard\n\nSupported Methods:\n\n`ext_online` - Display number of Extensions Online\n\n`services` - Display PBXware services\n\n`sip_registrations` - Display information for SIP registration\n\n`calls` - Calls Overview\n\n`glocom_editions` - Display information on apps registered to PBXware and the editions\n\n`glocom_users` - Display number of logged GloCOM users\n\n`licensing` - Display the percentage usage information of PBXware license\n\n`disk_usage` - Display information on current PBXware hard disk usage\n\n`cpu` - Display information on CPU usage on the PBXware server\n\n`memory` - Display information on PBXware memory usage"
		},
		{
			"name": "Monitor",
			"item": [
				{
					"name": "309:List Monitor Extensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check for error in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"",
									"        // Iterate through the keys of the response object",
									"        for (var key in responseBody) {",
									"            if (responseBody.hasOwnProperty(key)) {",
									"                var item = responseBody[key];",
									"                pm.expect(item).to.be.an('object');",
									"",
									"                // Add checks for specific fields within each item",
									"                pm.expect(item).to.have.property('name');",
									"                pm.expect(item.name).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ext');",
									"                pm.expect(item.ext).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ip');",
									"                pm.expect(item.ip).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('status');",
									"                pm.expect(item.status).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('ua');",
									"                pm.expect(item.ua).to.be.a('string');",
									"",
									"                pm.expect(item).to.have.property('dnd');",
									"                pm.expect(item.dnd).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"",
									"                pm.expect(item).to.have.property('on_call');",
									"                pm.expect(item.on_call).to.satisfy(function (value) {",
									"                    return value === '' || value === true || value === false;",
									"                });",
									"            }",
									"        }",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.list&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.list",
									"description": "Show Monitor extensions"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "310:Live Calls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// If the message is not found, proceed with checking the JSON structure",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Check if the response contains the \"Live Calls: 0\" message",
									"if (pm.response.text().includes(\"Live Calls: 0\")) {",
									"",
									"    // Mark the entire request as passing",
									"    pm.test('There are no active calls on the selected Server/Tenant!', function () {",
									"        pm.expect(true).to.be.true; // This will always pass",
									"    });",
									"} else {",
									"    const responseData = pm.response.json();",
									"",
									"    // Continue with the checks for the JSON structure",
									"    for (let callId in responseData) {",
									"        const call = responseData[callId];",
									"        pm.test(`From Field Check`, function () {",
									"            pm.expect(call).to.have.property('from').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`To Field Check`, function () {",
									"            pm.expect(call).to.have.property('to').to.be.a('string');",
									"        });",
									"",
									"        pm.test(`Check timestamp field`, function () {",
									"            pm.expect(call).to.have.property('timestamp').to.be.a('number');",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.monitor.live_calls&server={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.monitor.live_calls",
									"description": "Show Live calls"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Filter extensions by tenant/server."
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Supported Methods\n\n`list`\n\nList Monitor extensions\n\n`live_calls`\n\nList Live calls"
		},
		{
			"name": "Clear All",
			"item": [
				{
					"name": "555:Deleting ERGs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Deleted ERG successfully!', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"",
									"        pm.collectionVariables.set(\"ERGsID\", null);",
									"",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.erg.delete&server={{TenantID}}&id={{ERGsID}}",
							"protocol": "https",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.erg.delete",
									"description": "Deleting Enhanced Ring Groups"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Tenant/Server ID"
								},
								{
									"key": "id",
									"value": "{{ERGsID}}",
									"description": "Enhanced Ring Group IDs"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "311:Deleting Ring Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('Successfully deleted Ring Group!', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"",
									"        pm.collectionVariables.set(\"RG_ID\", null);",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ring_group.delete&server={{TenantID}}&id={{RG_ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ring_group.delete",
									"description": "For deleting multiple Ring groups use RGs.csv file, just populate filds for Srv/Tenant-ID and RGsID."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{RG_ID}}",
									"description": "Ring Group ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "312:Deleting IVRs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"",
									"        pm.collectionVariables.set(\"IVR_ID\", null);",
									"",
									"        // Print the success message",
									"        console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ivr.delete&server={{TenantID}}&id={{IVR_ID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ivr.delete",
									"description": "Use CSV IVRs.csv file for deleting more IVRs in one move. Populate Srv/Tenant-ID and IVRsID."
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. If running in Tenant Mode, make sure this is always greater than 1."
								},
								{
									"key": "id",
									"value": "{{IVR_ID}}",
									"description": "IVRs ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "556:Deleting DID CLI Routing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success message",
									"    pm.test('CLI Routing Deletion Success', function () {",
									"        pm.expect(responseBody.success).to.be.a('string');",
									"        pm.expect(responseBody.success).to.include('CLI Routing successfully deleted!');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_CLI_RouteID\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.clirouting.delete&id={{DID_ID_1}}&server={{TenantID}}&cliroutingid={{DID_CLI_RouteID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.clirouting.delete",
									"description": "If need to delete more CLI routings from multiple Tenants, you can use Add/Edit/Delete-CLI_Routing.csv file."
								},
								{
									"key": "id",
									"value": "{{DID_ID_1}}",
									"description": "DID ID (Required). (Regex: /^\\\\d+$/)"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server/Tenant ID. (Required) If PBXware is running in Tenant Mode this is a required field and must contain a valid Tenant ID. Server ID 1 is always assigned to Master tenant and cannot be used."
								},
								{
									"key": "cliroutingid",
									"value": "{{DID_CLI_RouteID}}",
									"description": "CLI Routing ID (Required)"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "313:Deleting DID_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_ID_1\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server=1&id={{DID_ID_1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID_ID_1}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "314:Deleting DID_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"",
									"    pm.collectionVariables.set(\"DID_ID_2\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server=1&id={{DID_ID_2}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID_ID_2}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "315:Deleting DID_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the success response",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        // Print the result for each deleted DID",
									"        console.log('Deleted DID:', responseBody.success);",
									"    });",
									"    pm.collectionVariables.set(\"DID_ID_3\", null);",
									"    pm.collectionVariables.set(\"DIDIDs\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.did.delete&server=1&id={{DID_ID_3}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.did.delete",
									"description": "Use CSV file Add&EditDIDs.csv and populate only Srv/TenantDIDs and DID-IDs column to delete more DIDs at one time."
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server/Tenant ID. In Tenant Mode make sure this is always set to 1."
								},
								{
									"key": "id",
									"value": "{{DID_ID_3}}",
									"description": "DID ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "546:Deleting Extension 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate success response",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"",
									"    pm.collectionVariables.set(\"ExtID4\", null);",
									"",
									"    // Print the success message",
									"    console.log(\"Success: \" + responseBody.success);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{TenantID}}&id={{ExtID4}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.delete"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID4}}",
									"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "316:Deleting Extension 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate success response",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"",
									"    pm.collectionVariables.set(\"ExtID3\", null);",
									"",
									"    // Print the success message",
									"    console.log(\"Success: \" + responseBody.success);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{TenantID}}&id={{ExtID3}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.delete"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID3}}",
									"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "317:Deleting Extension 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate success response",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"",
									"    pm.collectionVariables.set(\"ExtID2\", null);",
									"",
									"    // Print the success message",
									"    console.log(\"Success: \" + responseBody.success);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{TenantID}}&id={{ExtID2}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.delete"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID2}}",
									"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "318:Deleting Extension 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate success response",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"    });",
									"",
									"",
									"    pm.collectionVariables.set(\"ExtID1\", null);",
									"",
									"    // Print the success message",
									"    console.log(\"Success: \" + responseBody.success);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.ext.delete&server={{TenantID}}&id={{ExtID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.ext.delete"
								},
								{
									"key": "server",
									"value": "{{TenantID}}",
									"description": "Server or Tenant ID"
								},
								{
									"key": "id",
									"value": "{{ExtID1}}",
									"description": "IDs of extension that we want to delete. For more extensions just run folder wirh CSV file."
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "319:Deleting Tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"",
									"        pm.collectionVariables.set(\"TenantID\", null);",
									"",
									"        // Print the success message",
									"        //console.log('Success:', responseBody.success);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.tenant.delete&server=1&id={{TenantID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.tenant.delete"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{TenantID}}",
									"description": "Tenant ID. For deletenig more tenants use Add&Edit-Tenant.csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "320:Deleting Tenant Packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseBody = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseBody) {",
									"    console.error(\"Test Failed: \" + responseBody.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseBody.error);",
									"    });",
									"} else {",
									"    // Validate the response structure",
									"    pm.test('Response Validation', function () {",
									"        pm.expect(responseBody).to.be.an('object');",
									"        pm.expect(responseBody).to.have.property('success').that.is.a('string');",
									"        pm.expect(responseBody).to.have.property('id').that.is.a('string');",
									"",
									"        // Print the success message and ID",
									"        console.log('Success:', responseBody.success);",
									"        console.log('Package ID:', responseBody.id);",
									"",
									"        pm.collectionVariables.set(\"TenantPackageID\", null);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/index.php?apikey={{API_Key}}&action=pbxware.package.delete&server=1&id={{TenantPackageID}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								"index.php"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "action",
									"value": "pbxware.package.delete"
								},
								{
									"key": "server",
									"value": "1",
									"description": "Server ID which must be set to 1"
								},
								{
									"key": "id",
									"value": "{{TenantPackageID}}",
									"description": "Tenant Package ID"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "321:Delete Trunk 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseJson = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseJson) {",
									"    console.error(\"Test Failed: \" + responseJson.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseJson.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseJson).to.be.an('object');",
									"",
									"        // Check if success is a string",
									"        pm.expect(responseJson.success).to.be.a('string');",
									"",
									"        // Check if id is a string",
									"        pm.expect(responseJson.id).to.be.a('string');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"TrunkID1\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.delete&apikey={{API_Key}}&id={{TrunkID1}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.delete"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "id",
									"value": "{{TrunkID1}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "322:Delete Trunk 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseJson = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseJson) {",
									"    console.error(\"Test Failed: \" + responseJson.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseJson.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseJson).to.be.an('object');",
									"",
									"        // Check if success is a string",
									"        pm.expect(responseJson.success).to.be.a('string');",
									"",
									"        // Check if id is a string",
									"        pm.expect(responseJson.id).to.be.a('string');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"TrunkID2\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.delete&apikey={{API_Key}}&id={{TrunkID2}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.delete"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "id",
									"value": "{{TrunkID2}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "323:Delete Trunk 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseJson = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseJson) {",
									"    console.error(\"Test Failed: \" + responseJson.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseJson.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseJson).to.be.an('object');",
									"",
									"        // Check if success is a string",
									"        pm.expect(responseJson.success).to.be.a('string');",
									"",
									"        // Check if id is a string",
									"        pm.expect(responseJson.id).to.be.a('string');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"TrunkID3\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.delete&apikey={{API_Key}}&id={{TrunkID3}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.delete"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "id",
									"value": "{{TrunkID3}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "324:Delete Trunk 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check for 200 OK response",
									"pm.test('Status code is 200 OK', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Parse the response JSON",
									"var responseJson = pm.response.json();",
									"",
									"// Check if there is an error field in the response",
									"if ('error' in responseJson) {",
									"    console.error(\"Test Failed: \" + responseJson.error);",
									"    pm.test('API Response Error', function () {",
									"        pm.expect.fail(responseJson.error);",
									"    });",
									"} else {",
									"    // Validate the success response structure",
									"    pm.test('Success Response Validation', function () {",
									"        pm.expect(responseJson).to.be.an('object');",
									"",
									"        // Check if success is a string",
									"        pm.expect(responseJson.success).to.be.a('string');",
									"",
									"        // Check if id is a string",
									"        pm.expect(responseJson.id).to.be.a('string');",
									"    });",
									"",
									"    pm.collectionVariables.set(\"TrunkID4\", null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{IP}}/?action=pbxware.trunk.delete&apikey={{API_Key}}&id={{TrunkID4}}",
							"protocol": "http",
							"host": [
								"{{IP}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "action",
									"value": "pbxware.trunk.delete"
								},
								{
									"key": "apikey",
									"value": "{{API_Key}}"
								},
								{
									"key": "id",
									"value": "{{TrunkID4}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "IP",
			"value": ""
		},
		{
			"key": "API_Key",
			"value": "Test123456789"
		},
		{
			"key": "TenantPackageName",
			"value": "API_Package"
		},
		{
			"key": "TenantPackageID",
			"value": ""
		},
		{
			"key": "tenant_name",
			"value": "TenantNameAPI"
		},
		{
			"key": "tenant_code",
			"value": "900"
		},
		{
			"key": "ExtLength",
			"value": "3"
		},
		{
			"key": "Country",
			"value": "135"
		},
		{
			"key": "NationalCode",
			"value": "0"
		},
		{
			"key": "InternationalCode",
			"value": "00"
		},
		{
			"key": "TenantID",
			"value": "2"
		},
		{
			"key": "TrunkName",
			"value": "Trunk1"
		},
		{
			"key": "ProviderID",
			"value": "20"
		},
		{
			"key": "TrunkType",
			"value": "friend"
		},
		{
			"key": "TrunkDTMFmode",
			"value": "rfc2833"
		},
		{
			"key": "TrunkStatus",
			"value": "active"
		},
		{
			"key": "EmergTrunk",
			"value": "no"
		},
		{
			"key": "TrunkHost",
			"value": "10.1.165.92"
		},
		{
			"key": "TrunkUserName",
			"value": "admin"
		},
		{
			"key": "TrunkInsecure",
			"value": "port,invite"
		},
		{
			"key": "TrunkLooseRouting",
			"value": "yes"
		},
		{
			"key": "TrunkIncomingLimit",
			"value": "100"
		},
		{
			"key": "TrunkOutgoingLimit",
			"value": "100"
		},
		{
			"key": "TrunkBusyLevel",
			"value": "0"
		},
		{
			"key": "TrunkCodecs",
			"value": "ulaw,alaw"
		},
		{
			"key": "TrunkCodecsPrimeTime",
			"value": "50,60"
		},
		{
			"key": "TrunkIDs",
			"value": ""
		},
		{
			"key": "TrunkID1",
			"value": ""
		},
		{
			"key": "TrunkID2",
			"value": ""
		},
		{
			"key": "TrunkID3",
			"value": ""
		},
		{
			"key": "TrunkID4",
			"value": ""
		},
		{
			"key": "CLIRoutID1",
			"value": ""
		},
		{
			"key": "CLIRoutID2",
			"value": ""
		},
		{
			"key": "SPID1",
			"value": ""
		},
		{
			"key": "SPID2",
			"value": ""
		},
		{
			"key": "ExtName1",
			"value": "ExtTest1"
		},
		{
			"key": "ExtName2",
			"value": "ExtTest2"
		},
		{
			"key": "ExtName3",
			"value": "ExtTest3"
		},
		{
			"key": "ExtEmail1",
			"value": "exttest1@test.com"
		},
		{
			"key": "ExtEmail2",
			"value": "exttest2@test.com"
		},
		{
			"key": "ExtNumber1",
			"value": "901"
		},
		{
			"key": "ExtNumber2",
			"value": "902"
		},
		{
			"key": "ExtNumber3",
			"value": "903"
		},
		{
			"key": "ExtSecret",
			"value": "Test123!"
		},
		{
			"key": "ExtPin",
			"value": "1111"
		},
		{
			"key": "ExtID1",
			"value": ""
		},
		{
			"key": "ExtID2",
			"value": ""
		},
		{
			"key": "ExtID3",
			"value": ""
		},
		{
			"key": "ExtID4",
			"value": ""
		},
		{
			"key": "DID1",
			"value": "0038735900901"
		},
		{
			"key": "DID2",
			"value": "0038735900902"
		},
		{
			"key": "DID3",
			"value": "0038735900903"
		},
		{
			"key": "DestType",
			"value": "0"
		},
		{
			"key": "DID-Disabled",
			"value": "0"
		},
		{
			"key": "DID_ID_1",
			"value": ""
		},
		{
			"key": "DID_ID_2",
			"value": ""
		},
		{
			"key": "DID_ID_3",
			"value": ""
		},
		{
			"key": "IVR_ID",
			"value": ""
		},
		{
			"key": "RG_ID",
			"value": ""
		},
		{
			"key": "CLIRoutID",
			"value": ""
		},
		{
			"key": "DIDGroupID",
			"value": ""
		},
		{
			"key": "DID-IDs",
			"value": ""
		},
		{
			"key": "DIDIDs",
			"value": ""
		},
		{
			"key": "ERGsID",
			"value": ""
		},
		{
			"key": "SP-ID",
			"value": ""
		},
		{
			"key": "DID_CLI_RouteID",
			"value": ""
		}
	]
}